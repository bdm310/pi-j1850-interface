
build/pi-j1850-interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000012b2  00001346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000034b  00800100  00800100  00001346  2**0
                  ALLOC
  3 .stab         00002e20  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001380  00000000  00000000  00004168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000054e8  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000054fc  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_5>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__vector_7>
      20:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__vector_8>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_14>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_17>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_21>
      58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      68:	84 02       	muls	r24, r20
      6a:	6a 02       	muls	r22, r26
      6c:	14 02       	muls	r17, r20
      6e:	bd 01       	movw	r22, r26
      70:	ba 01       	movw	r22, r20
      72:	b6 01       	movw	r22, r12
      74:	b2 01       	movw	r22, r4
      76:	92 02       	muls	r25, r18

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_clear_bss>:
      84:	24 e0       	ldi	r18, 0x04	; 4
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ab 34       	cpi	r26, 0x4B	; 75
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 9b 08 	call	0x1136	; 0x1136 <main>
      98:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <__vector_14>:
static volatile uint8_t sw_new;

static uint8_t last_sw_state;
static uint8_t last_pwr_state;

ISR(TIMER0_COMPA_vect) {
      a0:	1f 92       	push	r1
      a2:	0f 92       	push	r0
      a4:	0f b6       	in	r0, 0x3f	; 63
      a6:	0f 92       	push	r0
      a8:	11 24       	eor	r1, r1
      aa:	8f 93       	push	r24
    static uint8_t cnt_10ms;
    
    tmr_10ms ++;
      ac:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <tmr_10ms>
      b0:	8f 5f       	subi	r24, 0xFF	; 255
      b2:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <tmr_10ms>
    cnt_10ms ++;
      b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
      ba:	8f 5f       	subi	r24, 0xFF	; 255
    
    if(cnt_10ms == 100) {
      bc:	84 36       	cpi	r24, 0x64	; 100
      be:	41 f0       	breq	.+16     	; 0xd0 <__vector_14+0x30>

ISR(TIMER0_COMPA_vect) {
    static uint8_t cnt_10ms;
    
    tmr_10ms ++;
    cnt_10ms ++;
      c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    
    if(cnt_10ms == 100) {
        cnt_10ms = 0;
        tmr_1s ++;
    }
}
      c4:	8f 91       	pop	r24
      c6:	0f 90       	pop	r0
      c8:	0f be       	out	0x3f, r0	; 63
      ca:	0f 90       	pop	r0
      cc:	1f 90       	pop	r1
      ce:	18 95       	reti
    
    tmr_10ms ++;
    cnt_10ms ++;
    
    if(cnt_10ms == 100) {
        cnt_10ms = 0;
      d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
        tmr_1s ++;
      d4:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <tmr_1s>
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <tmr_1s>
    }
}
      de:	8f 91       	pop	r24
      e0:	0f 90       	pop	r0
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	0f 90       	pop	r0
      e6:	1f 90       	pop	r1
      e8:	18 95       	reti

000000ea <__vector_21>:

ISR(ADC_vect) {
      ea:	1f 92       	push	r1
      ec:	0f 92       	push	r0
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	0f 92       	push	r0
      f2:	11 24       	eor	r1, r1
      f4:	8f 93       	push	r24
      f6:	9f 93       	push	r25
    //Are we on channel 1?
    if(ADMUX & (1<<MUX0)) {
      f8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
      fc:	80 fd       	sbrc	r24, 0
      fe:	11 c0       	rjmp	.+34     	; 0x122 <__vector_21+0x38>
        sw_adc[1] = ADCH;
        sw_new = 1;
    }
    else sw_adc[0] = ADCH;
     100:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     104:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sw_adc>
        
    //Move channels and start the conversion
    ADMUX = ADMUX ^ (1<<MUX0);
     108:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	89 27       	eor	r24, r25
     110:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
}
     114:	9f 91       	pop	r25
     116:	8f 91       	pop	r24
     118:	0f 90       	pop	r0
     11a:	0f be       	out	0x3f, r0	; 63
     11c:	0f 90       	pop	r0
     11e:	1f 90       	pop	r1
     120:	18 95       	reti
}

ISR(ADC_vect) {
    //Are we on channel 1?
    if(ADMUX & (1<<MUX0)) {
        sw_adc[1] = ADCH;
     122:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     126:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sw_adc+0x1>
        sw_new = 1;
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sw_new>
     130:	eb cf       	rjmp	.-42     	; 0x108 <__vector_21+0x1e>

00000132 <__vector_17>:
static ringbuf_t tx_buf;

static uint8_t spi_status;
static uint8_t spi_cmd_status;

ISR(SPI_STC_vect) {
     132:	1f 92       	push	r1
     134:	0f 92       	push	r0
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	2f 93       	push	r18
     13e:	3f 93       	push	r19
     140:	4f 93       	push	r20
     142:	5f 93       	push	r21
     144:	8f 93       	push	r24
     146:	9f 93       	push	r25
     148:	ef 93       	push	r30
     14a:	ff 93       	push	r31
    uint8_t byte = SPDR;
     14c:	9e b5       	in	r25, 0x2e	; 46
    
    if(spi_status == 0x01) {
     14e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <spi_status>
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	09 f1       	breq	.+66     	; 0x198 <__vector_17+0x66>
            tx_buf.start = start;
        }
        
        spi_status = 0x00;
    }
    else if(spi_status == 0x02) {
     156:	82 30       	cpi	r24, 0x02	; 2
     158:	c1 f1       	breq	.+112    	; 0x1ca <__vector_17+0x98>
        if(end != rx_buf.start) rx_buf.end = end;
        
        spi_status = 0x00;
    }
    else {
        if(byte == 0) SPDR = tx_buf.start != tx_buf.end;
     15a:	99 23       	and	r25, r25
     15c:	79 f0       	breq	.+30     	; 0x17c <__vector_17+0x4a>
        spi_status = byte;
     15e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <spi_status>
    }
}
     162:	ff 91       	pop	r31
     164:	ef 91       	pop	r30
     166:	9f 91       	pop	r25
     168:	8f 91       	pop	r24
     16a:	5f 91       	pop	r21
     16c:	4f 91       	pop	r20
     16e:	3f 91       	pop	r19
     170:	2f 91       	pop	r18
     172:	0f 90       	pop	r0
     174:	0f be       	out	0x3f, r0	; 63
     176:	0f 90       	pop	r0
     178:	1f 90       	pop	r1
     17a:	18 95       	reti
        if(end != rx_buf.start) rx_buf.end = end;
        
        spi_status = 0x00;
    }
    else {
        if(byte == 0) SPDR = tx_buf.start != tx_buf.end;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <tx_buf+0x41>
     182:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <tx_buf+0x42>
     186:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <tx_buf+0x43>
     18a:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <tx_buf+0x44>
     18e:	42 17       	cp	r20, r18
     190:	53 07       	cpc	r21, r19
     192:	81 f1       	breq	.+96     	; 0x1f4 <__vector_17+0xc2>
     194:	8e bd       	out	0x2e, r24	; 46
     196:	e3 cf       	rjmp	.-58     	; 0x15e <__vector_17+0x2c>

ISR(SPI_STC_vect) {
    uint8_t byte = SPDR;
    
    if(spi_status == 0x01) {
        SPDR = *tx_buf.start;
     198:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <tx_buf+0x41>
     19c:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <tx_buf+0x42>
     1a0:	80 81       	ld	r24, Z
     1a2:	8e bd       	out	0x2e, r24	; 46
        
        //On underflow just keep sending the last byte
        uint8_t *start = (uint8_t *)tx_buf.start;
        if(start != tx_buf.end) {
     1a4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tx_buf+0x43>
     1a8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <tx_buf+0x44>
     1ac:	8e 17       	cp	r24, r30
     1ae:	9f 07       	cpc	r25, r31
     1b0:	49 f0       	breq	.+18     	; 0x1c4 <__vector_17+0x92>
            start ++;
     1b2:	31 96       	adiw	r30, 0x01	; 1
            if(start == tx_buf.buf + SPI_BUF_SIZE) start = (uint8_t *)tx_buf.buf;
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	e9 34       	cpi	r30, 0x49	; 73
     1b8:	f8 07       	cpc	r31, r24
     1ba:	11 f1       	breq	.+68     	; 0x200 <__vector_17+0xce>
            tx_buf.start = start;
     1bc:	f0 93 4a 01 	sts	0x014A, r31	; 0x80014a <tx_buf+0x42>
     1c0:	e0 93 49 01 	sts	0x0149, r30	; 0x800149 <tx_buf+0x41>
        }
        
        spi_status = 0x00;
     1c4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <spi_status>
     1c8:	cc cf       	rjmp	.-104    	; 0x162 <__vector_17+0x30>
    }
    else if(spi_status == 0x02) {
        uint8_t *end = (uint8_t *)rx_buf.end;
        *end = byte;
     1ca:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <rx_buf+0x43>
     1ce:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <rx_buf+0x44>
     1d2:	91 93       	st	Z+, r25
        
        end ++;
        if(end == rx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)rx_buf.buf;
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	ee 38       	cpi	r30, 0x8E	; 142
     1d8:	f8 07       	cpc	r31, r24
     1da:	79 f0       	breq	.+30     	; 0x1fa <__vector_17+0xc8>
        //On overflow just keep dropping the last byte
        if(end != rx_buf.start) rx_buf.end = end;
     1dc:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <rx_buf+0x41>
     1e0:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <rx_buf+0x42>
     1e4:	8e 17       	cp	r24, r30
     1e6:	9f 07       	cpc	r25, r31
     1e8:	69 f3       	breq	.-38     	; 0x1c4 <__vector_17+0x92>
     1ea:	f0 93 91 01 	sts	0x0191, r31	; 0x800191 <rx_buf+0x44>
     1ee:	e0 93 90 01 	sts	0x0190, r30	; 0x800190 <rx_buf+0x43>
     1f2:	e8 cf       	rjmp	.-48     	; 0x1c4 <__vector_17+0x92>
        
        spi_status = 0x00;
    }
    else {
        if(byte == 0) SPDR = tx_buf.start != tx_buf.end;
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	8e bd       	out	0x2e, r24	; 46
     1f8:	b2 cf       	rjmp	.-156    	; 0x15e <__vector_17+0x2c>
    else if(spi_status == 0x02) {
        uint8_t *end = (uint8_t *)rx_buf.end;
        *end = byte;
        
        end ++;
        if(end == rx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)rx_buf.buf;
     1fa:	ed e4       	ldi	r30, 0x4D	; 77
     1fc:	f1 e0       	ldi	r31, 0x01	; 1
     1fe:	ee cf       	rjmp	.-36     	; 0x1dc <__vector_17+0xaa>
        
        //On underflow just keep sending the last byte
        uint8_t *start = (uint8_t *)tx_buf.start;
        if(start != tx_buf.end) {
            start ++;
            if(start == tx_buf.buf + SPI_BUF_SIZE) start = (uint8_t *)tx_buf.buf;
     200:	e8 e0       	ldi	r30, 0x08	; 8
     202:	f1 e0       	ldi	r31, 0x01	; 1
     204:	db cf       	rjmp	.-74     	; 0x1bc <__vector_17+0x8a>

00000206 <spi_tx_push>:
    }
}

inline int8_t spi_tx_push(uint8_t byte) {
    uint8_t *end = (uint8_t *)tx_buf.end;
    *end = byte;
     206:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <tx_buf+0x43>
     20a:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <tx_buf+0x44>
     20e:	81 93       	st	Z+, r24
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	e9 34       	cpi	r30, 0x49	; 73
     214:	f8 07       	cpc	r31, r24
     216:	79 f0       	breq	.+30     	; 0x236 <spi_tx_push+0x30>
    
    //On overflow drop the last byte and let the caller know
    if(end != tx_buf.start) {
     218:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tx_buf+0x41>
     21c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tx_buf+0x42>
     220:	8e 17       	cp	r24, r30
     222:	9f 07       	cpc	r25, r31
     224:	59 f0       	breq	.+22     	; 0x23c <spi_tx_push+0x36>
        cli();
     226:	f8 94       	cli
        tx_buf.end = end;
     228:	f0 93 4c 01 	sts	0x014C, r31	; 0x80014c <tx_buf+0x44>
     22c:	e0 93 4b 01 	sts	0x014B, r30	; 0x80014b <tx_buf+0x43>
        sei();
     230:	78 94       	sei
    }
    else return -1;
    
    return 0;
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	08 95       	ret
inline int8_t spi_tx_push(uint8_t byte) {
    uint8_t *end = (uint8_t *)tx_buf.end;
    *end = byte;
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
     236:	e8 e0       	ldi	r30, 0x08	; 8
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	ee cf       	rjmp	.-36     	; 0x218 <spi_tx_push+0x12>
    if(end != tx_buf.start) {
        cli();
        tx_buf.end = end;
        sei();
    }
    else return -1;
     23c:	8f ef       	ldi	r24, 0xFF	; 255
    
    return 0;
}
     23e:	08 95       	ret

00000240 <spi_process>:
    }
    //Let the requester know there's no data
    else spi_tx_push(0x00);
}

void spi_process(void) {
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
    cli();
     24a:	f8 94       	cli
    uint8_t *start = (uint8_t *)rx_buf.start;
     24c:	c0 91 8e 01 	lds	r28, 0x018E	; 0x80018e <rx_buf+0x41>
     250:	d0 91 8f 01 	lds	r29, 0x018F	; 0x80018f <rx_buf+0x42>
    uint8_t *end = (uint8_t *)rx_buf.end;
     254:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <rx_buf+0x43>
     258:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <rx_buf+0x44>
    sei();
     25c:	78 94       	sei
    
    if(start != end) {
     25e:	c8 17       	cp	r28, r24
     260:	d9 07       	cpc	r29, r25
     262:	c1 f0       	breq	.+48     	; 0x294 <spi_process+0x54>
        switch(spi_cmd_status) {
     264:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <spi_cmd_status>
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	09 f4       	brne	.+2      	; 0x26e <spi_process+0x2e>
     26c:	5f c0       	rjmp	.+190    	; 0x32c <spi_process+0xec>
     26e:	08 f4       	brcc	.+2      	; 0x272 <spi_process+0x32>
     270:	6c c0       	rjmp	.+216    	; 0x34a <spi_process+0x10a>
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	09 f4       	brne	.+2      	; 0x278 <spi_process+0x38>
     276:	3f c0       	rjmp	.+126    	; 0x2f6 <spi_process+0xb6>
     278:	84 30       	cpi	r24, 0x04	; 4
     27a:	91 f0       	breq	.+36     	; 0x2a0 <spi_process+0x60>
            case 0x05:
                
                break;
        }
        
        start ++;
     27c:	21 96       	adiw	r28, 0x01	; 1
        if(start == rx_buf.buf + SPI_BUF_SIZE) start = (uint8_t *)rx_buf.buf;
     27e:	f1 e0       	ldi	r31, 0x01	; 1
     280:	ce 38       	cpi	r28, 0x8E	; 142
     282:	df 07       	cpc	r29, r31
     284:	09 f4       	brne	.+2      	; 0x288 <spi_process+0x48>
     286:	4f c0       	rjmp	.+158    	; 0x326 <spi_process+0xe6>
        cli();
     288:	f8 94       	cli
        rx_buf.start = start;
     28a:	d0 93 8f 01 	sts	0x018F, r29	; 0x80018f <rx_buf+0x42>
     28e:	c0 93 8e 01 	sts	0x018E, r28	; 0x80018e <rx_buf+0x41>
        sei();
     292:	78 94       	sei
    }
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	08 95       	ret
                break;
            case 0x03:
                
                break;
            case 0x04:
                buf = (j1850_msg_buf_t *)j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_end].buf;
     2a0:	00 91 e3 02 	lds	r16, 0x02E3	; 0x8002e3 <j1850_bus+0x151>
     2a4:	8f e0       	ldi	r24, 0x0F	; 15
     2a6:	80 9f       	mul	r24, r16
     2a8:	80 01       	movw	r16, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	09 56       	subi	r16, 0x69	; 105
     2ae:	1d 4f       	sbci	r17, 0xFD	; 253
                byte = (uint8_t *)&j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_end].byte_ptr;
     2b0:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <j1850_bus+0x151>
                
                buf->buf[*byte] = *start;
     2b4:	8e 9f       	mul	r24, r30
     2b6:	f0 01       	movw	r30, r0
     2b8:	11 24       	eor	r1, r1
     2ba:	ec 55       	subi	r30, 0x5C	; 92
     2bc:	fd 4f       	sbci	r31, 0xFD	; 253
     2be:	90 81       	ld	r25, Z
     2c0:	88 81       	ld	r24, Y
     2c2:	f8 01       	movw	r30, r16
     2c4:	e9 0f       	add	r30, r25
     2c6:	f1 1d       	adc	r31, r1
     2c8:	80 83       	st	Z, r24
                buf->byte_ptr++;
     2ca:	f8 01       	movw	r30, r16
     2cc:	f5 84       	ldd	r15, Z+13	; 0x0d
     2ce:	f3 94       	inc	r15
     2d0:	f5 86       	std	Z+13, r15	; 0x0d
                if(buf->byte_ptr == buf->bytes) {
     2d2:	84 85       	ldd	r24, Z+12	; 0x0c
     2d4:	f8 12       	cpse	r15, r24
     2d6:	d2 cf       	rjmp	.-92     	; 0x27c <spi_process+0x3c>
                    buf->buf[buf->byte_ptr] = j1850_crc(buf->buf, buf->bytes);
     2d8:	6f 2d       	mov	r22, r15
     2da:	c8 01       	movw	r24, r16
     2dc:	0e 94 1d 07 	call	0xe3a	; 0xe3a <j1850_crc>
     2e0:	f8 01       	movw	r30, r16
     2e2:	ef 0d       	add	r30, r15
     2e4:	f1 1d       	adc	r31, r1
     2e6:	80 83       	st	Z, r24
                    buf->bytes ++;
     2e8:	f8 01       	movw	r30, r16
     2ea:	84 85       	ldd	r24, Z+12	; 0x0c
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
     2ee:	84 87       	std	Z+12, r24	; 0x0c
                    spi_cmd_status = 0x00;
     2f0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <spi_cmd_status>
     2f4:	c3 cf       	rjmp	.-122    	; 0x27c <spi_process+0x3c>
                j1850_listen_headers[j1850_listen_bytes] = *start;
                j1850_listen_bytes ++;
                spi_cmd_status = 0;
                break;
            case 0x02:
                j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_end].bytes = *start;
     2f6:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <j1850_bus+0x151>
     2fa:	98 81       	ld	r25, Y
     2fc:	8f e0       	ldi	r24, 0x0F	; 15
     2fe:	8e 9f       	mul	r24, r30
     300:	f0 01       	movw	r30, r0
     302:	11 24       	eor	r1, r1
     304:	ed 55       	subi	r30, 0x5D	; 93
     306:	fd 4f       	sbci	r31, 0xFD	; 253
     308:	90 83       	st	Z, r25
                j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_end].byte_ptr = 0; 
     30a:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <j1850_bus+0x151>
     30e:	8e 9f       	mul	r24, r30
     310:	f0 01       	movw	r30, r0
     312:	11 24       	eor	r1, r1
     314:	ec 55       	subi	r30, 0x5C	; 92
     316:	fd 4f       	sbci	r31, 0xFD	; 253
     318:	10 82       	st	Z, r1
            case 0x05:
                
                break;
        }
        
        start ++;
     31a:	21 96       	adiw	r28, 0x01	; 1
        if(start == rx_buf.buf + SPI_BUF_SIZE) start = (uint8_t *)rx_buf.buf;
     31c:	f1 e0       	ldi	r31, 0x01	; 1
     31e:	ce 38       	cpi	r28, 0x8E	; 142
     320:	df 07       	cpc	r29, r31
     322:	09 f0       	breq	.+2      	; 0x326 <spi_process+0xe6>
     324:	b1 cf       	rjmp	.-158    	; 0x288 <spi_process+0x48>
     326:	cd e4       	ldi	r28, 0x4D	; 77
     328:	d1 e0       	ldi	r29, 0x01	; 1
     32a:	ae cf       	rjmp	.-164    	; 0x288 <spi_process+0x48>
                        spi_cmd_status = 0x03;
                        break;
                }
                break;
            case 0x01:
                j1850_listen_headers[j1850_listen_bytes] = *start;
     32c:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <j1850_listen_bytes>
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	88 81       	ld	r24, Y
     334:	e6 5c       	subi	r30, 0xC6	; 198
     336:	fb 4f       	sbci	r31, 0xFB	; 251
     338:	80 83       	st	Z, r24
                j1850_listen_bytes ++;
     33a:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <j1850_listen_bytes>
     33e:	8f 5f       	subi	r24, 0xFF	; 255
     340:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <j1850_listen_bytes>
                spi_cmd_status = 0;
     344:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <spi_cmd_status>
                break;
     348:	99 cf       	rjmp	.-206    	; 0x27c <spi_process+0x3c>
    if(start != end) {
        switch(spi_cmd_status) {
            j1850_msg_buf_t *buf;
            uint8_t *byte;
            case 0x00:
                switch(*start) {
     34a:	e8 81       	ld	r30, Y
     34c:	8e 2f       	mov	r24, r30
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	fc 01       	movw	r30, r24
     352:	31 97       	sbiw	r30, 0x01	; 1
     354:	e8 30       	cpi	r30, 0x08	; 8
     356:	f1 05       	cpc	r31, r1
     358:	08 f0       	brcs	.+2      	; 0x35c <spi_process+0x11c>
     35a:	90 cf       	rjmp	.-224    	; 0x27c <spi_process+0x3c>
     35c:	ec 5c       	subi	r30, 0xCC	; 204
     35e:	ff 4f       	sbci	r31, 0xFF	; 255
     360:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__tablejump2__>
                        break;
                    case 0x06:
                        spi_cmd_status = 0x01;
                        break;
                    case 0x07:
                        spi_cmd_status = 0x02;
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <spi_cmd_status>
                        break;
     36a:	88 cf       	rjmp	.-240    	; 0x27c <spi_process+0x3c>
                        break;
                    case 0x05:
                        j1850_listen_bytes = 0;
                        break;
                    case 0x06:
                        spi_cmd_status = 0x01;
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <spi_cmd_status>
                        break;
     372:	84 cf       	rjmp	.-248    	; 0x27c <spi_process+0x3c>
                        break;
                    case 0x04:
                        pop_j1850_to_spi(1);
                        break;
                    case 0x05:
                        j1850_listen_bytes = 0;
     374:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <j1850_listen_bytes>
                        break;
     378:	81 cf       	rjmp	.-254    	; 0x27c <spi_process+0x3c>
    
    return 0;
}

static inline void pop_j1850_to_spi(uint8_t bus) {
    uint8_t start = j1850_bus[bus].rx_msg_start;
     37a:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <j1850_bus+0x255>
    cli(); 
     37e:	f8 94       	cli
    uint8_t end = j1850_bus[bus].rx_msg_end;
     380:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <j1850_bus+0x256>
    sei();
     384:	78 94       	sei
    
    if(start != end) {
     386:	89 17       	cp	r24, r25
     388:	09 f4       	brne	.+2      	; 0x38c <spi_process+0x14c>
     38a:	ea c0       	rjmp	.+468    	; 0x560 <__FUSE_REGION_LENGTH__+0x160>
        j1850_msg_buf_t *msg = (j1850_msg_buf_t *)&j1850_bus[bus].rx_buf[start];
     38c:	90 e0       	ldi	r25, 0x00	; 0
    }
}

inline int8_t spi_tx_push(uint8_t byte) {
    uint8_t *end = (uint8_t *)tx_buf.end;
    *end = byte;
     38e:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <tx_buf+0x43>
     392:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <tx_buf+0x44>
     396:	21 e0       	ldi	r18, 0x01	; 1
     398:	21 93       	st	Z+, r18
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	e9 34       	cpi	r30, 0x49	; 73
     39e:	f2 07       	cpc	r31, r18
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <spi_process+0x164>
     3a2:	ec c0       	rjmp	.+472    	; 0x57c <__FUSE_REGION_LENGTH__+0x17c>
    
    //On overflow drop the last byte and let the caller know
    if(end != tx_buf.start) {
     3a4:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <tx_buf+0x41>
     3a8:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <tx_buf+0x42>
     3ac:	2e 17       	cp	r18, r30
     3ae:	3f 07       	cpc	r19, r31
     3b0:	31 f0       	breq	.+12     	; 0x3be <spi_process+0x17e>
        cli();
     3b2:	f8 94       	cli
        tx_buf.end = end;
     3b4:	f0 93 4c 01 	sts	0x014C, r31	; 0x80014c <tx_buf+0x44>
     3b8:	e0 93 4b 01 	sts	0x014B, r30	; 0x80014b <tx_buf+0x43>
        sei();
     3bc:	78 94       	sei
        
        //Let the requester know there's data
        spi_tx_push(0x01);
        
        uint8_t i;
        for(i=0; i<msg->bytes; i++) {
     3be:	2f e0       	ldi	r18, 0x0F	; 15
     3c0:	28 9f       	mul	r18, r24
     3c2:	a0 01       	movw	r20, r0
     3c4:	29 9f       	mul	r18, r25
     3c6:	50 0d       	add	r21, r0
     3c8:	11 24       	eor	r1, r1
     3ca:	4e 56       	subi	r20, 0x6E	; 110
     3cc:	5e 4f       	sbci	r21, 0xFE	; 254
     3ce:	da 01       	movw	r26, r20
     3d0:	ae 59       	subi	r26, 0x9E	; 158
     3d2:	be 4f       	sbci	r27, 0xFE	; 254
     3d4:	8c 91       	ld	r24, X
     3d6:	88 23       	and	r24, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <spi_process+0x19c>
     3da:	a8 c0       	rjmp	.+336    	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	12 c0       	rjmp	.+36     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
    
    //On overflow drop the last byte and let the caller know
    if(end != tx_buf.start) {
     3e0:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <tx_buf+0x41>
     3e4:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <tx_buf+0x42>
     3e8:	2e 17       	cp	r18, r30
     3ea:	3f 07       	cpc	r19, r31
     3ec:	31 f0       	breq	.+12     	; 0x3fa <spi_process+0x1ba>
        cli();
     3ee:	f8 94       	cli
        tx_buf.end = end;
     3f0:	f0 93 4c 01 	sts	0x014C, r31	; 0x80014c <tx_buf+0x44>
     3f4:	e0 93 4b 01 	sts	0x014B, r30	; 0x80014b <tx_buf+0x43>
        sei();
     3f8:	78 94       	sei
        
        //Let the requester know there's data
        spi_tx_push(0x01);
        
        uint8_t i;
        for(i=0; i<msg->bytes; i++) {
     3fa:	8f 5f       	subi	r24, 0xFF	; 255
     3fc:	9c 91       	ld	r25, X
     3fe:	89 17       	cp	r24, r25
     400:	08 f0       	brcs	.+2      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
     402:	94 c0       	rjmp	.+296    	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
            spi_tx_push(msg->buf[i]);
     404:	fa 01       	movw	r30, r20
     406:	e8 0f       	add	r30, r24
     408:	f1 1d       	adc	r31, r1
     40a:	ea 5a       	subi	r30, 0xAA	; 170
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	90 81       	ld	r25, Z
    }
}

inline int8_t spi_tx_push(uint8_t byte) {
    uint8_t *end = (uint8_t *)tx_buf.end;
    *end = byte;
     410:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <tx_buf+0x43>
     414:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <tx_buf+0x44>
     418:	91 93       	st	Z+, r25
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	e9 34       	cpi	r30, 0x49	; 73
     41e:	f9 07       	cpc	r31, r25
     420:	f9 f6       	brne	.-66     	; 0x3e0 <spi_process+0x1a0>
     422:	e8 e0       	ldi	r30, 0x08	; 8
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	dc cf       	rjmp	.-72     	; 0x3e0 <spi_process+0x1a0>
    
    return 0;
}

static inline void pop_j1850_to_spi(uint8_t bus) {
    uint8_t start = j1850_bus[bus].rx_msg_start;
     428:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <j1850_bus+0x103>
    cli(); 
     42c:	f8 94       	cli
    uint8_t end = j1850_bus[bus].rx_msg_end;
     42e:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <j1850_bus+0x104>
    sei();
     432:	78 94       	sei
    
    if(start != end) {
     434:	89 17       	cp	r24, r25
     436:	09 f4       	brne	.+2      	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
     438:	93 c0       	rjmp	.+294    	; 0x560 <__FUSE_REGION_LENGTH__+0x160>
        j1850_msg_buf_t *msg = (j1850_msg_buf_t *)&j1850_bus[bus].rx_buf[start];
     43a:	90 e0       	ldi	r25, 0x00	; 0
    }
}

inline int8_t spi_tx_push(uint8_t byte) {
    uint8_t *end = (uint8_t *)tx_buf.end;
    *end = byte;
     43c:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <tx_buf+0x43>
     440:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <tx_buf+0x44>
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	21 93       	st	Z+, r18
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
     448:	21 e0       	ldi	r18, 0x01	; 1
     44a:	e9 34       	cpi	r30, 0x49	; 73
     44c:	f2 07       	cpc	r31, r18
     44e:	09 f4       	brne	.+2      	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     450:	92 c0       	rjmp	.+292    	; 0x576 <__FUSE_REGION_LENGTH__+0x176>
    
    //On overflow drop the last byte and let the caller know
    if(end != tx_buf.start) {
     452:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <tx_buf+0x41>
     456:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <tx_buf+0x42>
     45a:	2e 17       	cp	r18, r30
     45c:	3f 07       	cpc	r19, r31
     45e:	31 f0       	breq	.+12     	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
        cli();
     460:	f8 94       	cli
        tx_buf.end = end;
     462:	f0 93 4c 01 	sts	0x014C, r31	; 0x80014c <tx_buf+0x44>
     466:	e0 93 4b 01 	sts	0x014B, r30	; 0x80014b <tx_buf+0x43>
        sei();
     46a:	78 94       	sei
        
        //Let the requester know there's data
        spi_tx_push(0x01);
        
        uint8_t i;
        for(i=0; i<msg->bytes; i++) {
     46c:	2f e0       	ldi	r18, 0x0F	; 15
     46e:	28 9f       	mul	r18, r24
     470:	a0 01       	movw	r20, r0
     472:	29 9f       	mul	r18, r25
     474:	50 0d       	add	r21, r0
     476:	11 24       	eor	r1, r1
     478:	fa 01       	movw	r30, r20
     47a:	ee 56       	subi	r30, 0x6E	; 110
     47c:	fe 4f       	sbci	r31, 0xFE	; 254
     47e:	80 89       	ldd	r24, Z+16	; 0x10
     480:	88 23       	and	r24, r24
     482:	09 f4       	brne	.+2      	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
     484:	60 c0       	rjmp	.+192    	; 0x546 <__FUSE_REGION_LENGTH__+0x146>
     486:	80 e0       	ldi	r24, 0x00	; 0
            spi_tx_push(msg->buf[i]);
     488:	af 01       	movw	r20, r30
        
        //Let the requester know there's data
        spi_tx_push(0x01);
        
        uint8_t i;
        for(i=0; i<msg->bytes; i++) {
     48a:	df 01       	movw	r26, r30
     48c:	50 96       	adiw	r26, 0x10	; 16
     48e:	12 c0       	rjmp	.+36     	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
    
    //On overflow drop the last byte and let the caller know
    if(end != tx_buf.start) {
     490:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <tx_buf+0x41>
     494:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <tx_buf+0x42>
     498:	2e 17       	cp	r18, r30
     49a:	3f 07       	cpc	r19, r31
     49c:	31 f0       	breq	.+12     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
        cli();
     49e:	f8 94       	cli
        tx_buf.end = end;
     4a0:	f0 93 4c 01 	sts	0x014C, r31	; 0x80014c <tx_buf+0x44>
     4a4:	e0 93 4b 01 	sts	0x014B, r30	; 0x80014b <tx_buf+0x43>
        sei();
     4a8:	78 94       	sei
        
        //Let the requester know there's data
        spi_tx_push(0x01);
        
        uint8_t i;
        for(i=0; i<msg->bytes; i++) {
     4aa:	8f 5f       	subi	r24, 0xFF	; 255
     4ac:	9c 91       	ld	r25, X
     4ae:	89 17       	cp	r24, r25
     4b0:	08 f0       	brcs	.+2      	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
     4b2:	49 c0       	rjmp	.+146    	; 0x546 <__FUSE_REGION_LENGTH__+0x146>
            spi_tx_push(msg->buf[i]);
     4b4:	fa 01       	movw	r30, r20
     4b6:	e8 0f       	add	r30, r24
     4b8:	f1 1d       	adc	r31, r1
     4ba:	94 81       	ldd	r25, Z+4	; 0x04
    }
}

inline int8_t spi_tx_push(uint8_t byte) {
    uint8_t *end = (uint8_t *)tx_buf.end;
    *end = byte;
     4bc:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <tx_buf+0x43>
     4c0:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <tx_buf+0x44>
     4c4:	91 93       	st	Z+, r25
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	e9 34       	cpi	r30, 0x49	; 73
     4ca:	f9 07       	cpc	r31, r25
     4cc:	09 f7       	brne	.-62     	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
     4ce:	e8 e0       	ldi	r30, 0x08	; 8
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	de cf       	rjmp	.-68     	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
                switch(*start) {
                    case 0x01:
                        spi_tx_push(sw_state);
                        break;
                    case 0x02:
                        spi_tx_push(pwr_state);
     4d4:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <pwr_state>
    }
}

inline int8_t spi_tx_push(uint8_t byte) {
    uint8_t *end = (uint8_t *)tx_buf.end;
    *end = byte;
     4d8:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <tx_buf+0x43>
     4dc:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <tx_buf+0x44>
     4e0:	81 93       	st	Z+, r24
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	e9 34       	cpi	r30, 0x49	; 73
     4e6:	f8 07       	cpc	r31, r24
     4e8:	d1 f0       	breq	.+52     	; 0x51e <__FUSE_REGION_LENGTH__+0x11e>
    
    //On overflow drop the last byte and let the caller know
    if(end != tx_buf.start) {
     4ea:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tx_buf+0x41>
     4ee:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tx_buf+0x42>
     4f2:	8e 17       	cp	r24, r30
     4f4:	9f 07       	cpc	r25, r31
     4f6:	09 f4       	brne	.+2      	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
     4f8:	c1 ce       	rjmp	.-638    	; 0x27c <spi_process+0x3c>
        cli();
     4fa:	f8 94       	cli
        tx_buf.end = end;
     4fc:	f0 93 4c 01 	sts	0x014C, r31	; 0x80014c <tx_buf+0x44>
     500:	e0 93 4b 01 	sts	0x014B, r30	; 0x80014b <tx_buf+0x43>
        sei();
     504:	78 94       	sei
     506:	ba ce       	rjmp	.-652    	; 0x27c <spi_process+0x3c>
            j1850_msg_buf_t *buf;
            uint8_t *byte;
            case 0x00:
                switch(*start) {
                    case 0x01:
                        spi_tx_push(sw_state);
     508:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <sw_state>
    }
}

inline int8_t spi_tx_push(uint8_t byte) {
    uint8_t *end = (uint8_t *)tx_buf.end;
    *end = byte;
     50c:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <tx_buf+0x43>
     510:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <tx_buf+0x44>
     514:	81 93       	st	Z+, r24
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
     516:	21 e0       	ldi	r18, 0x01	; 1
     518:	e9 34       	cpi	r30, 0x49	; 73
     51a:	f2 07       	cpc	r31, r18
     51c:	31 f7       	brne	.-52     	; 0x4ea <__FUSE_REGION_LENGTH__+0xea>
     51e:	e8 e0       	ldi	r30, 0x08	; 8
     520:	f1 e0       	ldi	r31, 0x01	; 1
     522:	e3 cf       	rjmp	.-58     	; 0x4ea <__FUSE_REGION_LENGTH__+0xea>
                        break;
                    case 0x07:
                        spi_cmd_status = 0x02;
                        break;
                    case 0x08:
                        spi_cmd_status = 0x03;
     524:	83 e0       	ldi	r24, 0x03	; 3
     526:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <spi_cmd_status>
                        break;
     52a:	a8 ce       	rjmp	.-688    	; 0x27c <spi_process+0x3c>
        uint8_t i;
        for(i=0; i<msg->bytes; i++) {
            spi_tx_push(msg->buf[i]);
        }
        
        j1850_bus[bus].rx_msg_start ++;
     52c:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <j1850_bus+0x255>
     530:	8f 5f       	subi	r24, 0xFF	; 255
     532:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <j1850_bus+0x255>
        if(j1850_bus[bus].rx_msg_start == J1850_MSG_BUF_SIZE_RX) j1850_bus[bus].rx_msg_start = 0;
     536:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <j1850_bus+0x255>
     53a:	81 31       	cpi	r24, 0x11	; 17
     53c:	09 f0       	breq	.+2      	; 0x540 <__FUSE_REGION_LENGTH__+0x140>
     53e:	9e ce       	rjmp	.-708    	; 0x27c <spi_process+0x3c>
     540:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <j1850_bus+0x255>
     544:	9b ce       	rjmp	.-714    	; 0x27c <spi_process+0x3c>
        uint8_t i;
        for(i=0; i<msg->bytes; i++) {
            spi_tx_push(msg->buf[i]);
        }
        
        j1850_bus[bus].rx_msg_start ++;
     546:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <j1850_bus+0x103>
     54a:	8f 5f       	subi	r24, 0xFF	; 255
     54c:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <j1850_bus+0x103>
        if(j1850_bus[bus].rx_msg_start == J1850_MSG_BUF_SIZE_RX) j1850_bus[bus].rx_msg_start = 0;
     550:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <j1850_bus+0x103>
     554:	81 31       	cpi	r24, 0x11	; 17
     556:	09 f0       	breq	.+2      	; 0x55a <__FUSE_REGION_LENGTH__+0x15a>
     558:	91 ce       	rjmp	.-734    	; 0x27c <spi_process+0x3c>
     55a:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <j1850_bus+0x103>
     55e:	8e ce       	rjmp	.-740    	; 0x27c <spi_process+0x3c>
    }
}

inline int8_t spi_tx_push(uint8_t byte) {
    uint8_t *end = (uint8_t *)tx_buf.end;
    *end = byte;
     560:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <tx_buf+0x43>
     564:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <tx_buf+0x44>
     568:	11 92       	st	Z+, r1
    
    end ++;
    if(end == tx_buf.buf + SPI_BUF_SIZE) end = (uint8_t *)tx_buf.buf;
     56a:	21 e0       	ldi	r18, 0x01	; 1
     56c:	e9 34       	cpi	r30, 0x49	; 73
     56e:	f2 07       	cpc	r31, r18
     570:	09 f0       	breq	.+2      	; 0x574 <__FUSE_REGION_LENGTH__+0x174>
     572:	bb cf       	rjmp	.-138    	; 0x4ea <__FUSE_REGION_LENGTH__+0xea>
     574:	d4 cf       	rjmp	.-88     	; 0x51e <__FUSE_REGION_LENGTH__+0x11e>
     576:	e8 e0       	ldi	r30, 0x08	; 8
     578:	f1 e0       	ldi	r31, 0x01	; 1
     57a:	6b cf       	rjmp	.-298    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     57c:	e8 e0       	ldi	r30, 0x08	; 8
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	11 cf       	rjmp	.-478    	; 0x3a4 <spi_process+0x164>

00000582 <spi_init_slave>:
        sei();
    }
}

void spi_init_slave(void) {
    spi_status = 0;
     582:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <spi_status>
    spi_cmd_status = 0;
     586:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <spi_cmd_status>
    
    //Setup ring buffer pointers
    rx_buf.start = rx_buf.buf;
     58a:	8d e4       	ldi	r24, 0x4D	; 77
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <rx_buf+0x42>
     592:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <rx_buf+0x41>
    rx_buf.end = rx_buf.start;
     596:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <rx_buf+0x44>
     59a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <rx_buf+0x43>
    tx_buf.start = tx_buf.buf;
     59e:	88 e0       	ldi	r24, 0x08	; 8
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <tx_buf+0x42>
     5a6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tx_buf+0x41>
    tx_buf.end = tx_buf.start;
     5aa:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <tx_buf+0x44>
     5ae:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tx_buf+0x43>
    
    //MISO as OUTPUT
    MISO_DDR |= MISO_MSK;
     5b2:	24 9a       	sbi	0x04, 4	; 4
    //Enable SPI and interrupt
    SPDR = 0;
     5b4:	1e bc       	out	0x2e, r1	; 46
    SPCR = (1<<SPE) | (1<<SPIE);
     5b6:	80 ec       	ldi	r24, 0xC0	; 192
     5b8:	8c bd       	out	0x2c, r24	; 44
     5ba:	08 95       	ret

000005bc <__vector_5>:
#include "j1850.h"

/*
 * Service the pin change ISR and direct it to the proper bus
 */
ISR(PCINT2_vect) {
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	0f 92       	push	r0
     5c4:	11 24       	eor	r1, r1
     5c6:	2f 93       	push	r18
     5c8:	3f 93       	push	r19
     5ca:	4f 93       	push	r20
     5cc:	5f 93       	push	r21
     5ce:	6f 93       	push	r22
     5d0:	7f 93       	push	r23
     5d2:	8f 93       	push	r24
     5d4:	9f 93       	push	r25
     5d6:	af 93       	push	r26
     5d8:	bf 93       	push	r27
     5da:	ef 93       	push	r30
     5dc:	ff 93       	push	r31
    uint8_t tmr_cnt = TCNT2;
     5de:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    uint8_t bus_pin[2] = { J1850_BUS0_PIN_REG & J1850_BUS0_PIN_MSK, 
     5e2:	89 b1       	in	r24, 0x09	; 9
                           J1850_BUS1_PIN_REG & J1850_BUS1_PIN_MSK };
     5e4:	99 b1       	in	r25, 0x09	; 9
    
    if(J1850_BUS0_PCINT_REG & J1850_BUS0_PCINT_MSK) {
     5e6:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     5ea:	33 ff       	sbrs	r19, 3
     5ec:	24 c0       	rjmp	.+72     	; 0x636 <__vector_5+0x7a>
/*
 * Service the pin change ISR and direct it to the proper bus
 */
ISR(PCINT2_vect) {
    uint8_t tmr_cnt = TCNT2;
    uint8_t bus_pin[2] = { J1850_BUS0_PIN_REG & J1850_BUS0_PIN_MSK, 
     5ee:	88 70       	andi	r24, 0x08	; 8
                           J1850_BUS1_PIN_REG & J1850_BUS1_PIN_MSK };
    
    if(J1850_BUS0_PCINT_REG & J1850_BUS0_PCINT_MSK) {
        if(bus_pin[0] ^ j1850_bus[0].last_pin) {
     5f0:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <j1850_bus>
     5f4:	83 17       	cp	r24, r19
     5f6:	f9 f0       	breq	.+62     	; 0x636 <__vector_5+0x7a>
            j1850_bus[0].last_pin = bus_pin[0];
     5f8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <j1850_bus>
            
            uint8_t state = j1850_bus[0].state;
     5fc:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <j1850_bus+0x1>
            j1850_msg_buf_t *rx_msg = (j1850_msg_buf_t *)&j1850_bus[0].rx_buf[j1850_bus[0].rx_msg_end];
     600:	40 91 96 02 	lds	r20, 0x0296	; 0x800296 <j1850_bus+0x104>
            uint8_t delta = tmr_cnt - j1850_bus[0].ltmr;
     604:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <j1850_bus+0x2>
            j1850_bus[0].ltmr = tmr_cnt;
     608:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <j1850_bus+0x2>
            
            if(state == 0 && bus_pin[0]) {
     60c:	33 23       	and	r19, r19
     60e:	09 f4       	brne	.+2      	; 0x612 <__vector_5+0x56>
     610:	5e c0       	rjmp	.+188    	; 0x6ce <__vector_5+0x112>
    if(J1850_BUS0_PCINT_REG & J1850_BUS0_PCINT_MSK) {
        if(bus_pin[0] ^ j1850_bus[0].last_pin) {
            j1850_bus[0].last_pin = bus_pin[0];
            
            uint8_t state = j1850_bus[0].state;
            j1850_msg_buf_t *rx_msg = (j1850_msg_buf_t *)&j1850_bus[0].rx_buf[j1850_bus[0].rx_msg_end];
     612:	50 e0       	ldi	r21, 0x00	; 0
            uint8_t delta = tmr_cnt - j1850_bus[0].ltmr;
     614:	72 2f       	mov	r23, r18
     616:	76 1b       	sub	r23, r22
     618:	67 2f       	mov	r22, r23
            
            if(state == 0 && bus_pin[0]) {
                //Transition away from idle
                j1850_bus[0].state ++;
            }
            else if(state == 1 && !bus_pin[0]) {
     61a:	31 30       	cpi	r19, 0x01	; 1
     61c:	09 f4       	brne	.+2      	; 0x620 <__vector_5+0x64>
     61e:	de c0       	rjmp	.+444    	; 0x7dc <__vector_5+0x220>
                    rx_msg->bit_ptr = 0;
                    rx_msg->byte_ptr = 0;
                    rx_msg->bytes = 0;
                }
            }
            else if(state == 2) {
     620:	32 30       	cpi	r19, 0x02	; 2
     622:	09 f4       	brne	.+2      	; 0x626 <__vector_5+0x6a>
     624:	f2 c0       	rjmp	.+484    	; 0x80a <__vector_5+0x24e>
                    //We've started the 13th byte or the pulse was too short/long, something went wrong
                    J1850_BUS0_OCIE_REG &= ~J1850_BUS0_OCIE_MSK;
                    j1850_bus[0].state = 0;
                }
            }
            else if(state == 10) {
     626:	3a 30       	cpi	r19, 0x0A	; 10
     628:	31 f0       	breq	.+12     	; 0x636 <__vector_5+0x7a>
                //Trying to initiate a transmission, do nothing
            }
            else if(state == 11) {
     62a:	3b 30       	cpi	r19, 0x0B	; 11
     62c:	09 f4       	brne	.+2      	; 0x630 <__vector_5+0x74>
     62e:	63 c1       	rjmp	.+710    	; 0x8f6 <__vector_5+0x33a>
                //Pin changed while we were waiting for IFS, reset timer
                J1850_BUS0_OCR_REG = tmr_cnt + TX_IFS;
                J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
                J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
            }
            else if(state == 12) {
     630:	3c 30       	cpi	r19, 0x0C	; 12
     632:	09 f4       	brne	.+2      	; 0x636 <__vector_5+0x7a>
     634:	40 c1       	rjmp	.+640    	; 0x8b6 <__vector_5+0x2fa>
                } 
            }
        }
    }
    
    if(J1850_BUS1_PCINT_REG & J1850_BUS1_PCINT_MSK) {
     636:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     63a:	82 ff       	sbrs	r24, 2
     63c:	13 c0       	rjmp	.+38     	; 0x664 <__vector_5+0xa8>
/*
 * Service the pin change ISR and direct it to the proper bus
 */
ISR(PCINT2_vect) {
    uint8_t tmr_cnt = TCNT2;
    uint8_t bus_pin[2] = { J1850_BUS0_PIN_REG & J1850_BUS0_PIN_MSK, 
     63e:	94 70       	andi	r25, 0x04	; 4
            }
        }
    }
    
    if(J1850_BUS1_PCINT_REG & J1850_BUS1_PCINT_MSK) {
        if(bus_pin[1] ^ j1850_bus[1].last_pin) {
     640:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <j1850_bus+0x152>
     644:	98 17       	cp	r25, r24
     646:	71 f0       	breq	.+28     	; 0x664 <__vector_5+0xa8>
            j1850_bus[1].last_pin = bus_pin[1];
     648:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <j1850_bus+0x152>
            
            uint8_t state = j1850_bus[1].state;
     64c:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <j1850_bus+0x153>
            j1850_msg_buf_t *rx_msg = (j1850_msg_buf_t *)&j1850_bus[1].rx_buf[j1850_bus[1].rx_msg_end];
     650:	40 91 e8 03 	lds	r20, 0x03E8	; 0x8003e8 <j1850_bus+0x256>
            uint8_t delta = tmr_cnt - j1850_bus[1].ltmr;
     654:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <j1850_bus+0x154>
            j1850_bus[1].ltmr = tmr_cnt;
     658:	20 93 e6 02 	sts	0x02E6, r18	; 0x8002e6 <j1850_bus+0x154>
            
            if(state == 0 && bus_pin[1]) {
     65c:	81 11       	cpse	r24, r1
     65e:	13 c0       	rjmp	.+38     	; 0x686 <__vector_5+0xca>
     660:	91 11       	cpse	r25, r1
     662:	59 c0       	rjmp	.+178    	; 0x716 <__vector_5+0x15a>
                    j1850_bus[1].state = 0;
                } 
            }
        }
    }
}
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti
    if(J1850_BUS1_PCINT_REG & J1850_BUS1_PCINT_MSK) {
        if(bus_pin[1] ^ j1850_bus[1].last_pin) {
            j1850_bus[1].last_pin = bus_pin[1];
            
            uint8_t state = j1850_bus[1].state;
            j1850_msg_buf_t *rx_msg = (j1850_msg_buf_t *)&j1850_bus[1].rx_buf[j1850_bus[1].rx_msg_end];
     686:	50 e0       	ldi	r21, 0x00	; 0
            uint8_t delta = tmr_cnt - j1850_bus[1].ltmr;
     688:	62 2f       	mov	r22, r18
     68a:	63 1b       	sub	r22, r19
     68c:	36 2f       	mov	r19, r22
            
            if(state == 0 && bus_pin[1]) {
                //Transition away from idle
                j1850_bus[1].state ++;
            }
            else if(state == 1 && !bus_pin[1]) {
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	39 f1       	breq	.+78     	; 0x6e0 <__vector_5+0x124>
                    rx_msg->bit_ptr = 0;
                    rx_msg->byte_ptr = 0;
                    rx_msg->bytes = 0;
                }
            }
            else if(state == 2) {
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	09 f4       	brne	.+2      	; 0x698 <__vector_5+0xdc>
     696:	45 c0       	rjmp	.+138    	; 0x722 <__vector_5+0x166>
                    //We've started the 13th byte or the pulse was too short/long, something went wrong
                    J1850_BUS1_OCIE_REG &= ~J1850_BUS1_OCIE_MSK;
                    j1850_bus[1].state = 0;
                }
            }
            else if(state == 10) {
     698:	8a 30       	cpi	r24, 0x0A	; 10
     69a:	21 f3       	breq	.-56     	; 0x664 <__vector_5+0xa8>
                //Trying to initiate a transmission, do nothing
            }
            else if(state == 11) {
     69c:	8b 30       	cpi	r24, 0x0B	; 11
     69e:	09 f4       	brne	.+2      	; 0x6a2 <__vector_5+0xe6>
     6a0:	1f c1       	rjmp	.+574    	; 0x8e0 <__vector_5+0x324>
                //Pin changed while we were waiting for IFS, reset timer
                J1850_BUS1_OCR_REG = tmr_cnt + TX_IFS;
                J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
                J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
            }
            else if(state == 12) {
     6a2:	8c 30       	cpi	r24, 0x0C	; 12
     6a4:	f9 f6       	brne	.-66     	; 0x664 <__vector_5+0xa8>
                //Sending bits, check that we're not getting overridden
                if(!(bus_pin[1]) != !(J1850_BUS1_PORT_REG & J1850_BUS1_PORT_MSK)) {
     6a6:	85 b1       	in	r24, 0x05	; 5
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	91 11       	cpse	r25, r1
     6ac:	02 c1       	rjmp	.+516    	; 0x8b2 <__vector_5+0x2f6>
     6ae:	81 fb       	bst	r24, 1
     6b0:	99 27       	eor	r25, r25
     6b2:	90 f9       	bld	r25, 0
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	89 27       	eor	r24, r25
     6b8:	28 17       	cp	r18, r24
     6ba:	a1 f2       	breq	.-88     	; 0x664 <__vector_5+0xa8>
                    J1850_BUS1_OCIE_REG &= ~J1850_BUS1_OCIE_MSK;
     6bc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     6c0:	8b 7f       	andi	r24, 0xFB	; 251
     6c2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
                    J1850_BUS1_PORT_REG &= ~J1850_BUS1_PORT_MSK;
     6c6:	29 98       	cbi	0x05, 1	; 5
                    j1850_bus[1].state = 0;
     6c8:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <j1850_bus+0x153>
     6cc:	cb cf       	rjmp	.-106    	; 0x664 <__vector_5+0xa8>
            uint8_t state = j1850_bus[0].state;
            j1850_msg_buf_t *rx_msg = (j1850_msg_buf_t *)&j1850_bus[0].rx_buf[j1850_bus[0].rx_msg_end];
            uint8_t delta = tmr_cnt - j1850_bus[0].ltmr;
            j1850_bus[0].ltmr = tmr_cnt;
            
            if(state == 0 && bus_pin[0]) {
     6ce:	88 23       	and	r24, r24
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <__vector_5+0x118>
     6d2:	b1 cf       	rjmp	.-158    	; 0x636 <__vector_5+0x7a>
                //Transition away from idle
                j1850_bus[0].state ++;
     6d4:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <j1850_bus+0x1>
     6d8:	8f 5f       	subi	r24, 0xFF	; 255
     6da:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <j1850_bus+0x1>
     6de:	ab cf       	rjmp	.-170    	; 0x636 <__vector_5+0x7a>
            
            if(state == 0 && bus_pin[1]) {
                //Transition away from idle
                j1850_bus[1].state ++;
            }
            else if(state == 1 && !bus_pin[1]) {
     6e0:	91 11       	cpse	r25, r1
     6e2:	c0 cf       	rjmp	.-128    	; 0x664 <__vector_5+0xa8>
                //Check for SOF
                if(delta > RX_SOF_MAX || delta < RX_SOF_MIN) {
     6e4:	38 52       	subi	r19, 0x28	; 40
     6e6:	34 31       	cpi	r19, 0x14	; 20
     6e8:	78 f7       	brcc	.-34     	; 0x6c8 <__vector_5+0x10c>
                    j1850_bus[1].state = 0;
                }
                else {
                    j1850_bus[1].state ++;
     6ea:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <j1850_bus+0x153>
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <j1850_bus+0x153>
                    rx_msg->bit_ptr = 0;
     6f4:	2f e0       	ldi	r18, 0x0F	; 15
     6f6:	24 9f       	mul	r18, r20
     6f8:	c0 01       	movw	r24, r0
     6fa:	25 9f       	mul	r18, r21
     6fc:	90 0d       	add	r25, r0
     6fe:	11 24       	eor	r1, r1
     700:	8e 56       	subi	r24, 0x6E	; 110
     702:	9e 4f       	sbci	r25, 0xFE	; 254
     704:	fc 01       	movw	r30, r24
     706:	ec 59       	subi	r30, 0x9C	; 156
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	10 82       	st	Z, r1
                    rx_msg->byte_ptr = 0;
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	10 82       	st	Z, r1
                    rx_msg->bytes = 0;
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	10 82       	st	Z, r1
     714:	a7 cf       	rjmp	.-178    	; 0x664 <__vector_5+0xa8>
            uint8_t delta = tmr_cnt - j1850_bus[1].ltmr;
            j1850_bus[1].ltmr = tmr_cnt;
            
            if(state == 0 && bus_pin[1]) {
                //Transition away from idle
                j1850_bus[1].state ++;
     716:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <j1850_bus+0x153>
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <j1850_bus+0x153>
     720:	a1 cf       	rjmp	.-190    	; 0x664 <__vector_5+0xa8>
                    rx_msg->bytes = 0;
                }
            }
            else if(state == 2) {
                //Receive data bits
                if(rx_msg->byte_ptr < 12 && delta > RX_SHORT_MIN && delta < RX_LONG_MAX) {
     722:	8f e0       	ldi	r24, 0x0F	; 15
     724:	84 9f       	mul	r24, r20
     726:	b0 01       	movw	r22, r0
     728:	85 9f       	mul	r24, r21
     72a:	70 0d       	add	r23, r0
     72c:	11 24       	eor	r1, r1
     72e:	6e 56       	subi	r22, 0x6E	; 110
     730:	7e 4f       	sbci	r23, 0xFE	; 254
     732:	fb 01       	movw	r30, r22
     734:	ed 59       	subi	r30, 0x9D	; 157
     736:	fe 4f       	sbci	r31, 0xFE	; 254
     738:	80 81       	ld	r24, Z
     73a:	8c 30       	cpi	r24, 0x0C	; 12
     73c:	08 f0       	brcs	.+2      	; 0x740 <__vector_5+0x184>
     73e:	46 c0       	rjmp	.+140    	; 0x7cc <__vector_5+0x210>
     740:	87 ef       	ldi	r24, 0xF7	; 247
     742:	83 0f       	add	r24, r19
     744:	8f 31       	cpi	r24, 0x1F	; 31
     746:	08 f0       	brcs	.+2      	; 0x74a <__vector_5+0x18e>
     748:	41 c0       	rjmp	.+130    	; 0x7cc <__vector_5+0x210>
                    //Setup EOD interrupt
                    J1850_BUS1_OCR_REG = tmr_cnt + RX_EOD_MIN;
     74a:	88 e2       	ldi	r24, 0x28	; 40
     74c:	82 0f       	add	r24, r18
     74e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
                    J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
     752:	ba 9a       	sbi	0x17, 2	; 23
                    J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
     754:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     758:	84 60       	ori	r24, 0x04	; 4
     75a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
                    
                    uint8_t *rx_byte = &rx_msg->buf[rx_msg->byte_ptr];
     75e:	a0 81       	ld	r26, Z
     760:	b0 e0       	ldi	r27, 0x00	; 0
                    
                    *rx_byte <<= 1;
     762:	6a 0f       	add	r22, r26
     764:	7b 1f       	adc	r23, r27
     766:	fb 01       	movw	r30, r22
     768:	ea 5a       	subi	r30, 0xAA	; 170
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	80 81       	ld	r24, Z
     76e:	88 0f       	add	r24, r24
     770:	80 83       	st	Z, r24
                    if((bus_pin[1] && delta > RX_LONG_MIN) || (!bus_pin[1] && delta < RX_SHORT_MAX)) {
     772:	91 11       	cpse	r25, r1
     774:	cb c0       	rjmp	.+406    	; 0x90c <__stack+0xd>
     776:	38 31       	cpi	r19, 0x18	; 24
     778:	68 f4       	brcc	.+26     	; 0x794 <__vector_5+0x1d8>
                        //Passive 1
                        *rx_byte |= 1;
     77a:	2f e0       	ldi	r18, 0x0F	; 15
     77c:	24 9f       	mul	r18, r20
     77e:	c0 01       	movw	r24, r0
     780:	25 9f       	mul	r18, r21
     782:	90 0d       	add	r25, r0
     784:	11 24       	eor	r1, r1
     786:	a8 0f       	add	r26, r24
     788:	b9 1f       	adc	r27, r25
     78a:	a8 51       	subi	r26, 0x18	; 24
     78c:	bd 4f       	sbci	r27, 0xFD	; 253
     78e:	8c 91       	ld	r24, X
     790:	81 60       	ori	r24, 0x01	; 1
     792:	8c 93       	st	X, r24
                    }
                    rx_msg->bit_ptr ++;
     794:	2f e0       	ldi	r18, 0x0F	; 15
     796:	24 9f       	mul	r18, r20
     798:	c0 01       	movw	r24, r0
     79a:	25 9f       	mul	r18, r21
     79c:	90 0d       	add	r25, r0
     79e:	11 24       	eor	r1, r1
     7a0:	8e 56       	subi	r24, 0x6E	; 110
     7a2:	9e 4f       	sbci	r25, 0xFE	; 254
     7a4:	fc 01       	movw	r30, r24
     7a6:	ec 59       	subi	r30, 0x9C	; 156
     7a8:	fe 4f       	sbci	r31, 0xFE	; 254
     7aa:	20 81       	ld	r18, Z
     7ac:	2f 5f       	subi	r18, 0xFF	; 255
     7ae:	20 83       	st	Z, r18
                    
                    if(rx_msg->bit_ptr == 8) {
     7b0:	20 81       	ld	r18, Z
     7b2:	28 30       	cpi	r18, 0x08	; 8
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <__vector_5+0x1fc>
     7b6:	56 cf       	rjmp	.-340    	; 0x664 <__vector_5+0xa8>
                        rx_msg->bit_ptr = 0;
     7b8:	10 82       	st	Z, r1
                        rx_msg->byte_ptr ++;
     7ba:	31 97       	sbiw	r30, 0x01	; 1
     7bc:	20 81       	ld	r18, Z
     7be:	2f 5f       	subi	r18, 0xFF	; 255
     7c0:	20 83       	st	Z, r18
                        rx_msg->bytes ++;
     7c2:	31 97       	sbiw	r30, 0x01	; 1
     7c4:	80 81       	ld	r24, Z
     7c6:	8f 5f       	subi	r24, 0xFF	; 255
     7c8:	80 83       	st	Z, r24
     7ca:	4c cf       	rjmp	.-360    	; 0x664 <__vector_5+0xa8>
                    }
                }
                else {
                    //We've started the 13th byte or the pulse was too short/long, something went wrong
                    J1850_BUS1_OCIE_REG &= ~J1850_BUS1_OCIE_MSK;
     7cc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     7d0:	8b 7f       	andi	r24, 0xFB	; 251
     7d2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
                    j1850_bus[1].state = 0;
     7d6:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <j1850_bus+0x153>
     7da:	44 cf       	rjmp	.-376    	; 0x664 <__vector_5+0xa8>
            
            if(state == 0 && bus_pin[0]) {
                //Transition away from idle
                j1850_bus[0].state ++;
            }
            else if(state == 1 && !bus_pin[0]) {
     7dc:	81 11       	cpse	r24, r1
     7de:	2b cf       	rjmp	.-426    	; 0x636 <__vector_5+0x7a>
                //Check for SOF
                if(delta > RX_SOF_MAX || delta < RX_SOF_MIN) {
     7e0:	68 52       	subi	r22, 0x28	; 40
     7e2:	64 31       	cpi	r22, 0x14	; 20
     7e4:	08 f0       	brcs	.+2      	; 0x7e8 <__vector_5+0x22c>
     7e6:	79 c0       	rjmp	.+242    	; 0x8da <__vector_5+0x31e>
                    j1850_bus[0].state = 0;
                }
                else {
                    j1850_bus[0].state ++;
     7e8:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <j1850_bus+0x1>
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
     7ee:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <j1850_bus+0x1>
                    rx_msg->bit_ptr = 0;
     7f2:	8f e0       	ldi	r24, 0x0F	; 15
     7f4:	84 9f       	mul	r24, r20
     7f6:	f0 01       	movw	r30, r0
     7f8:	85 9f       	mul	r24, r21
     7fa:	f0 0d       	add	r31, r0
     7fc:	11 24       	eor	r1, r1
     7fe:	ee 56       	subi	r30, 0x6E	; 110
     800:	fe 4f       	sbci	r31, 0xFE	; 254
     802:	12 8a       	std	Z+18, r1	; 0x12
                    rx_msg->byte_ptr = 0;
     804:	11 8a       	std	Z+17, r1	; 0x11
                    rx_msg->bytes = 0;
     806:	10 8a       	std	Z+16, r1	; 0x10
     808:	16 cf       	rjmp	.-468    	; 0x636 <__vector_5+0x7a>
                }
            }
            else if(state == 2) {
                //Receive data bits
                if(rx_msg->byte_ptr < 12 && delta > RX_SHORT_MIN && delta < RX_LONG_MAX) {
     80a:	3f e0       	ldi	r19, 0x0F	; 15
     80c:	34 9f       	mul	r19, r20
     80e:	f0 01       	movw	r30, r0
     810:	35 9f       	mul	r19, r21
     812:	f0 0d       	add	r31, r0
     814:	11 24       	eor	r1, r1
     816:	ee 56       	subi	r30, 0x6E	; 110
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	31 89       	ldd	r19, Z+17	; 0x11
     81c:	3c 30       	cpi	r19, 0x0C	; 12
     81e:	08 f0       	brcs	.+2      	; 0x822 <__vector_5+0x266>
     820:	40 c0       	rjmp	.+128    	; 0x8a2 <__vector_5+0x2e6>
     822:	37 ef       	ldi	r19, 0xF7	; 247
     824:	37 0f       	add	r19, r23
     826:	3f 31       	cpi	r19, 0x1F	; 31
     828:	e0 f5       	brcc	.+120    	; 0x8a2 <__vector_5+0x2e6>
                    //Setup EOD interrupt
                    J1850_BUS0_OCR_REG = tmr_cnt + RX_EOD_MIN;
     82a:	38 e2       	ldi	r19, 0x28	; 40
     82c:	32 0f       	add	r19, r18
     82e:	30 93 b3 00 	sts	0x00B3, r19	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
                    J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
     832:	b9 9a       	sbi	0x17, 1	; 23
                    J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
     834:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     838:	32 60       	ori	r19, 0x02	; 2
     83a:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
                    
                    uint8_t *rx_byte = &rx_msg->buf[rx_msg->byte_ptr];
     83e:	a1 89       	ldd	r26, Z+17	; 0x11
     840:	b0 e0       	ldi	r27, 0x00	; 0
                    
                    *rx_byte <<= 1;
     842:	ea 0f       	add	r30, r26
     844:	fb 1f       	adc	r31, r27
     846:	34 81       	ldd	r19, Z+4	; 0x04
     848:	33 0f       	add	r19, r19
     84a:	34 83       	std	Z+4, r19	; 0x04
                    if((bus_pin[0] && delta > RX_LONG_MIN) || (!bus_pin[0] && delta < RX_SHORT_MAX)) {
     84c:	81 11       	cpse	r24, r1
     84e:	62 c0       	rjmp	.+196    	; 0x914 <__stack+0x15>
     850:	78 31       	cpi	r23, 0x18	; 24
     852:	80 f4       	brcc	.+32     	; 0x874 <__vector_5+0x2b8>
                        //Passive 1
                        *rx_byte |= 1;
     854:	8f e0       	ldi	r24, 0x0F	; 15
     856:	84 9f       	mul	r24, r20
     858:	b0 01       	movw	r22, r0
     85a:	85 9f       	mul	r24, r21
     85c:	70 0d       	add	r23, r0
     85e:	11 24       	eor	r1, r1
     860:	6e 56       	subi	r22, 0x6E	; 110
     862:	7e 4f       	sbci	r23, 0xFE	; 254
     864:	a6 0f       	add	r26, r22
     866:	b7 1f       	adc	r27, r23
     868:	14 96       	adiw	r26, 0x04	; 4
     86a:	8c 91       	ld	r24, X
     86c:	14 97       	sbiw	r26, 0x04	; 4
     86e:	81 60       	ori	r24, 0x01	; 1
     870:	14 96       	adiw	r26, 0x04	; 4
     872:	8c 93       	st	X, r24
                    }
                    rx_msg->bit_ptr ++;
     874:	8f e0       	ldi	r24, 0x0F	; 15
     876:	84 9f       	mul	r24, r20
     878:	f0 01       	movw	r30, r0
     87a:	85 9f       	mul	r24, r21
     87c:	f0 0d       	add	r31, r0
     87e:	11 24       	eor	r1, r1
     880:	ee 56       	subi	r30, 0x6E	; 110
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	82 89       	ldd	r24, Z+18	; 0x12
     886:	8f 5f       	subi	r24, 0xFF	; 255
     888:	82 8b       	std	Z+18, r24	; 0x12
                    
                    if(rx_msg->bit_ptr == 8) {
     88a:	82 89       	ldd	r24, Z+18	; 0x12
     88c:	88 30       	cpi	r24, 0x08	; 8
     88e:	09 f0       	breq	.+2      	; 0x892 <__vector_5+0x2d6>
     890:	d2 ce       	rjmp	.-604    	; 0x636 <__vector_5+0x7a>
                        rx_msg->bit_ptr = 0;
     892:	12 8a       	std	Z+18, r1	; 0x12
                        rx_msg->byte_ptr ++;
     894:	81 89       	ldd	r24, Z+17	; 0x11
     896:	8f 5f       	subi	r24, 0xFF	; 255
     898:	81 8b       	std	Z+17, r24	; 0x11
                        rx_msg->bytes ++;
     89a:	80 89       	ldd	r24, Z+16	; 0x10
     89c:	8f 5f       	subi	r24, 0xFF	; 255
     89e:	80 8b       	std	Z+16, r24	; 0x10
     8a0:	ca ce       	rjmp	.-620    	; 0x636 <__vector_5+0x7a>
                    }
                }
                else {
                    //We've started the 13th byte or the pulse was too short/long, something went wrong
                    J1850_BUS0_OCIE_REG &= ~J1850_BUS0_OCIE_MSK;
     8a2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     8a6:	8d 7f       	andi	r24, 0xFD	; 253
     8a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
                    j1850_bus[0].state = 0;
     8ac:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <j1850_bus+0x1>
     8b0:	c2 ce       	rjmp	.-636    	; 0x636 <__vector_5+0x7a>
                J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
                J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
            }
            else if(state == 12) {
                //Sending bits, check that we're not getting overridden
                if(!(bus_pin[1]) != !(J1850_BUS1_PORT_REG & J1850_BUS1_PORT_MSK)) {
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	fc ce       	rjmp	.-520    	; 0x6ae <__vector_5+0xf2>
                J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
                J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
            }
            else if(state == 12) {
                //Sending bits, check that we're not getting overridden
                if(!(bus_pin[0]) != !(J1850_BUS0_PORT_REG & J1850_BUS0_PORT_MSK)) {
     8b6:	3b b1       	in	r19, 0x0b	; 11
     8b8:	41 e0       	ldi	r20, 0x01	; 1
     8ba:	81 11       	cpse	r24, r1
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	36 fb       	bst	r19, 6
     8c0:	33 27       	eor	r19, r19
     8c2:	30 f9       	bld	r19, 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	83 27       	eor	r24, r19
     8c8:	48 17       	cp	r20, r24
     8ca:	09 f4       	brne	.+2      	; 0x8ce <__vector_5+0x312>
     8cc:	b4 ce       	rjmp	.-664    	; 0x636 <__vector_5+0x7a>
                    J1850_BUS0_OCIE_REG &= ~J1850_BUS0_OCIE_MSK;
     8ce:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     8d2:	8d 7f       	andi	r24, 0xFD	; 253
     8d4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
                    J1850_BUS0_PORT_REG &= ~J1850_BUS0_PORT_MSK;
     8d8:	5e 98       	cbi	0x0b, 6	; 11
                    j1850_bus[0].state = 0;
     8da:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <j1850_bus+0x1>
     8de:	ab ce       	rjmp	.-682    	; 0x636 <__vector_5+0x7a>
            else if(state == 10) {
                //Trying to initiate a transmission, do nothing
            }
            else if(state == 11) {
                //Pin changed while we were waiting for IFS, reset timer
                J1850_BUS1_OCR_REG = tmr_cnt + TX_IFS;
     8e0:	8b e4       	ldi	r24, 0x4B	; 75
     8e2:	82 0f       	add	r24, r18
     8e4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
                J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
     8e8:	ba 9a       	sbi	0x17, 2	; 23
                J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
     8ea:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     8ee:	84 60       	ori	r24, 0x04	; 4
     8f0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     8f4:	b7 ce       	rjmp	.-658    	; 0x664 <__vector_5+0xa8>
            else if(state == 10) {
                //Trying to initiate a transmission, do nothing
            }
            else if(state == 11) {
                //Pin changed while we were waiting for IFS, reset timer
                J1850_BUS0_OCR_REG = tmr_cnt + TX_IFS;
     8f6:	8b e4       	ldi	r24, 0x4B	; 75
     8f8:	82 0f       	add	r24, r18
     8fa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
                J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
     8fe:	b9 9a       	sbi	0x17, 1	; 23
                J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
     900:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     904:	82 60       	ori	r24, 0x02	; 2
     906:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     90a:	95 ce       	rjmp	.-726    	; 0x636 <__vector_5+0x7a>
                    J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
                    
                    uint8_t *rx_byte = &rx_msg->buf[rx_msg->byte_ptr];
                    
                    *rx_byte <<= 1;
                    if((bus_pin[1] && delta > RX_LONG_MIN) || (!bus_pin[1] && delta < RX_SHORT_MAX)) {
     90c:	39 31       	cpi	r19, 0x19	; 25
     90e:	08 f0       	brcs	.+2      	; 0x912 <__stack+0x13>
     910:	34 cf       	rjmp	.-408    	; 0x77a <__vector_5+0x1be>
     912:	40 cf       	rjmp	.-384    	; 0x794 <__vector_5+0x1d8>
                    J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
                    
                    uint8_t *rx_byte = &rx_msg->buf[rx_msg->byte_ptr];
                    
                    *rx_byte <<= 1;
                    if((bus_pin[0] && delta > RX_LONG_MIN) || (!bus_pin[0] && delta < RX_SHORT_MAX)) {
     914:	79 31       	cpi	r23, 0x19	; 25
     916:	08 f0       	brcs	.+2      	; 0x91a <__stack+0x1b>
     918:	9d cf       	rjmp	.-198    	; 0x854 <__vector_5+0x298>
     91a:	ac cf       	rjmp	.-168    	; 0x874 <__vector_5+0x2b8>

0000091c <__vector_7>:
}

/*
 * J1850 channel timer compare interrupts
 */
ISR(TIMER2_COMPA_vect) {
     91c:	1f 92       	push	r1
     91e:	0f 92       	push	r0
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	0f 92       	push	r0
     924:	11 24       	eor	r1, r1
     926:	2f 93       	push	r18
     928:	3f 93       	push	r19
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
    uint8_t tmr_cnt = TCNT2;
     936:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    
    if(j1850_bus[0].state == 2) {
     93a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <j1850_bus+0x1>
     93e:	82 30       	cpi	r24, 0x02	; 2
     940:	e1 f0       	breq	.+56     	; 0x97a <__vector_7+0x5e>
            if(j1850_bus[0].rx_msg_end == j1850_bus[0].rx_msg_start) j1850_bus[0].rx_msg_end = prev_end;
        }
        
        j1850_bus[0].state = 0;
    }
    else if(j1850_bus[0].state == 10) {
     942:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <j1850_bus+0x1>
     946:	8a 30       	cpi	r24, 0x0A	; 10
     948:	09 f4       	brne	.+2      	; 0x94c <__vector_7+0x30>
     94a:	c8 c0       	rjmp	.+400    	; 0xadc <__vector_7+0x1c0>
        J1850_BUS0_PORT_REG &= ~J1850_BUS0_PORT_MSK;
        J1850_BUS0_OCR_REG = tmr_cnt + TX_IFS;
        J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
        J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
    }
    else if(j1850_bus[0].state == 11) {
     94c:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <j1850_bus+0x1>
     950:	8b 30       	cpi	r24, 0x0B	; 11
     952:	09 f4       	brne	.+2      	; 0x956 <__vector_7+0x3a>
     954:	5c c0       	rjmp	.+184    	; 0xa0e <__vector_7+0xf2>
        
        J1850_BUS0_OCR_REG = tmr_cnt + delay;
        J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
        J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
    }
    else if(j1850_bus[0].state == 12) {
     956:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <j1850_bus+0x1>
     95a:	8c 30       	cpi	r24, 0x0C	; 12
     95c:	09 f4       	brne	.+2      	; 0x960 <__vector_7+0x44>
     95e:	68 c0       	rjmp	.+208    	; 0xa30 <__vector_7+0x114>
        
        J1850_BUS0_OCR_REG = tmr_cnt + delay;
        J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
        J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
    }
}
     960:	ff 91       	pop	r31
     962:	ef 91       	pop	r30
     964:	bf 91       	pop	r27
     966:	af 91       	pop	r26
     968:	9f 91       	pop	r25
     96a:	8f 91       	pop	r24
     96c:	3f 91       	pop	r19
     96e:	2f 91       	pop	r18
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti
ISR(TIMER2_COMPA_vect) {
    uint8_t tmr_cnt = TCNT2;
    
    if(j1850_bus[0].state == 2) {
        //Received EOD
        J1850_BUS0_OCIE_REG &= ~J1850_BUS0_OCIE_MSK;
     97a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     97e:	8d 7f       	andi	r24, 0xFD	; 253
     980:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
        
        uint8_t match = 0;
        if(j1850_listen_bytes) {
     984:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <j1850_listen_bytes>
     988:	88 23       	and	r24, r24
     98a:	39 f1       	breq	.+78     	; 0x9da <__vector_7+0xbe>
            uint8_t i;
            for(i=0; i<j1850_listen_bytes; i++) {
     98c:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <j1850_listen_bytes>
     990:	88 23       	and	r24, r24
     992:	d1 f1       	breq	.+116    	; 0xa08 <__vector_7+0xec>
                if(j1850_bus[0].rx_buf[j1850_bus[0].rx_msg_end].buf[0] == j1850_listen_headers[i]) {
     994:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <j1850_bus+0x104>
     998:	8f e0       	ldi	r24, 0x0F	; 15
     99a:	e8 9f       	mul	r30, r24
     99c:	f0 01       	movw	r30, r0
     99e:	11 24       	eor	r1, r1
     9a0:	ee 56       	subi	r30, 0x6E	; 110
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	94 81       	ldd	r25, Z+4	; 0x04
     9a6:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <j1850_listen_headers>
     9aa:	98 17       	cp	r25, r24
     9ac:	b1 f0       	breq	.+44     	; 0x9da <__vector_7+0xbe>
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	3f e0       	ldi	r19, 0x0F	; 15
        J1850_BUS0_OCIE_REG &= ~J1850_BUS0_OCIE_MSK;
        
        uint8_t match = 0;
        if(j1850_listen_bytes) {
            uint8_t i;
            for(i=0; i<j1850_listen_bytes; i++) {
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <j1850_listen_bytes>
     9b8:	89 17       	cp	r24, r25
     9ba:	30 f5       	brcc	.+76     	; 0xa08 <__vector_7+0xec>
                if(j1850_bus[0].rx_buf[j1850_bus[0].rx_msg_end].buf[0] == j1850_listen_headers[i]) {
     9bc:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <j1850_bus+0x104>
     9c0:	3e 9f       	mul	r19, r30
     9c2:	f0 01       	movw	r30, r0
     9c4:	11 24       	eor	r1, r1
     9c6:	ee 56       	subi	r30, 0x6E	; 110
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	24 81       	ldd	r18, Z+4	; 0x04
     9cc:	e8 2f       	mov	r30, r24
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	e6 5c       	subi	r30, 0xC6	; 198
     9d2:	fb 4f       	sbci	r31, 0xFB	; 251
     9d4:	90 81       	ld	r25, Z
     9d6:	29 13       	cpse	r18, r25
     9d8:	ec cf       	rjmp	.-40     	; 0x9b2 <__vector_7+0x96>
            }
        }
        else match = 1;
        
        if(match) {
            uint8_t prev_end = j1850_bus[0].rx_msg_end;
     9da:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <j1850_bus+0x104>
            j1850_bus[0].new_msg = 1;
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <j1850_bus+0x3>
            j1850_bus[0].rx_msg_end++;
     9e4:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <j1850_bus+0x104>
     9e8:	8f 5f       	subi	r24, 0xFF	; 255
     9ea:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <j1850_bus+0x104>
            if(j1850_bus[0].rx_msg_end == J1850_MSG_BUF_SIZE_RX) j1850_bus[0].rx_msg_end = 0;
     9ee:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <j1850_bus+0x104>
     9f2:	81 31       	cpi	r24, 0x11	; 17
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <__vector_7+0xdc>
     9f6:	a4 c0       	rjmp	.+328    	; 0xb40 <__vector_7+0x224>
            if(j1850_bus[0].rx_msg_end == j1850_bus[0].rx_msg_start) j1850_bus[0].rx_msg_end = prev_end;
     9f8:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <j1850_bus+0x104>
     9fc:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <j1850_bus+0x103>
     a00:	98 13       	cpse	r25, r24
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <__vector_7+0xec>
     a04:	20 93 96 02 	sts	0x0296, r18	; 0x800296 <j1850_bus+0x104>
        }
        
        j1850_bus[0].state = 0;
     a08:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <j1850_bus+0x1>
     a0c:	a9 cf       	rjmp	.-174    	; 0x960 <__vector_7+0x44>
        uint8_t delay;
        uint8_t pin;
        
        pin = J1850_BUS0_PIN_REG & J1850_BUS0_PIN_MSK;
        
        if(pin) {
     a0e:	4b 99       	sbic	0x09, 3	; 9
     a10:	95 c0       	rjmp	.+298    	; 0xb3c <__vector_7+0x220>
            //Bus isn't passive
            delay = TX_IFS;
        }
        else {
            //Successfully waited for IFS
            j1850_bus[0].state = 12;
     a12:	8c e0       	ldi	r24, 0x0C	; 12
     a14:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <j1850_bus+0x1>
            J1850_BUS0_PORT_REG |= J1850_BUS0_PORT_MSK;
     a18:	5e 9a       	sbi	0x0b, 6	; 11
            delay = TX_SOF;
     a1a:	82 e3       	ldi	r24, 0x32	; 50
        }
        
        J1850_BUS0_OCR_REG = tmr_cnt + delay;
     a1c:	98 0f       	add	r25, r24
        if(!(j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].buf[j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].byte_ptr] & 0x80) != !pin) delay = TX_SHORT;
        else delay = TX_LONG;
        
        j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].buf[j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].byte_ptr] <<= 1;
        
        J1850_BUS0_OCR_REG = tmr_cnt + delay;
     a1e:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
        J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
     a22:	b9 9a       	sbi	0x17, 1	; 23
        J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
     a24:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     a28:	82 60       	ori	r24, 0x02	; 2
     a2a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     a2e:	98 cf       	rjmp	.-208    	; 0x960 <__vector_7+0x44>
        J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
    }
    else if(j1850_bus[0].state == 12) {
        //Sending bits
        uint8_t pin;
        pin = J1850_BUS0_PIN_REG & J1850_BUS0_PIN_MSK;
     a30:	29 b1       	in	r18, 0x09	; 9
        
        J1850_BUS0_PORT_REG ^= J1850_BUS0_PORT_MSK;
     a32:	3b b1       	in	r19, 0x0b	; 11
     a34:	80 e4       	ldi	r24, 0x40	; 64
     a36:	83 27       	eor	r24, r19
     a38:	8b b9       	out	0x0b, r24	; 11
        
        if(j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bit_ptr) j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bit_ptr --;
     a3a:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     a3e:	8f e0       	ldi	r24, 0x0F	; 15
     a40:	8e 9f       	mul	r24, r30
     a42:	f0 01       	movw	r30, r0
     a44:	11 24       	eor	r1, r1
     a46:	eb 55       	subi	r30, 0x5B	; 91
     a48:	fd 4f       	sbci	r31, 0xFD	; 253
     a4a:	30 81       	ld	r19, Z
     a4c:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     a50:	8e 9f       	mul	r24, r30
     a52:	f0 01       	movw	r30, r0
     a54:	11 24       	eor	r1, r1
     a56:	33 23       	and	r19, r19
     a58:	09 f4       	brne	.+2      	; 0xa5c <__vector_7+0x140>
     a5a:	58 c0       	rjmp	.+176    	; 0xb0c <__vector_7+0x1f0>
     a5c:	eb 55       	subi	r30, 0x5B	; 91
     a5e:	fd 4f       	sbci	r31, 0xFD	; 253
     a60:	80 81       	ld	r24, Z
     a62:	81 50       	subi	r24, 0x01	; 1
     a64:	80 83       	st	Z, r24
            return;
        }
        
        uint8_t delay;
        
        if(!(j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].buf[j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].byte_ptr] & 0x80) != !pin) delay = TX_SHORT;
     a66:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     a6a:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     a6e:	8f e0       	ldi	r24, 0x0F	; 15
     a70:	8a 9f       	mul	r24, r26
     a72:	d0 01       	movw	r26, r0
     a74:	11 24       	eor	r1, r1
     a76:	ac 55       	subi	r26, 0x5C	; 92
     a78:	bd 4f       	sbci	r27, 0xFD	; 253
     a7a:	3c 91       	ld	r19, X
     a7c:	8e 9f       	mul	r24, r30
     a7e:	f0 01       	movw	r30, r0
     a80:	11 24       	eor	r1, r1
     a82:	ee 56       	subi	r30, 0x6E	; 110
     a84:	fe 4f       	sbci	r31, 0xFE	; 254
     a86:	e3 0f       	add	r30, r19
     a88:	f1 1d       	adc	r31, r1
     a8a:	eb 5f       	subi	r30, 0xFB	; 251
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	80 81       	ld	r24, Z
     a90:	80 95       	com	r24
     a92:	88 1f       	adc	r24, r24
     a94:	88 27       	eor	r24, r24
     a96:	88 1f       	adc	r24, r24
     a98:	23 fb       	bst	r18, 3
     a9a:	22 27       	eor	r18, r18
     a9c:	20 f9       	bld	r18, 0
     a9e:	31 e0       	ldi	r19, 0x01	; 1
     aa0:	23 27       	eor	r18, r19
     aa2:	82 17       	cp	r24, r18
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <__vector_7+0x18c>
     aa6:	6d c0       	rjmp	.+218    	; 0xb82 <__vector_7+0x266>
     aa8:	30 e1       	ldi	r19, 0x10	; 16
        else delay = TX_LONG;
        
        j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].buf[j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].byte_ptr] <<= 1;
     aaa:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     aae:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     ab2:	8f e0       	ldi	r24, 0x0F	; 15
     ab4:	8a 9f       	mul	r24, r26
     ab6:	d0 01       	movw	r26, r0
     ab8:	11 24       	eor	r1, r1
     aba:	ac 55       	subi	r26, 0x5C	; 92
     abc:	bd 4f       	sbci	r27, 0xFD	; 253
     abe:	2c 91       	ld	r18, X
     ac0:	8e 9f       	mul	r24, r30
     ac2:	f0 01       	movw	r30, r0
     ac4:	11 24       	eor	r1, r1
     ac6:	ee 56       	subi	r30, 0x6E	; 110
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	e2 0f       	add	r30, r18
     acc:	f1 1d       	adc	r31, r1
     ace:	eb 5f       	subi	r30, 0xFB	; 251
     ad0:	fe 4f       	sbci	r31, 0xFE	; 254
     ad2:	80 81       	ld	r24, Z
     ad4:	88 0f       	add	r24, r24
     ad6:	80 83       	st	Z, r24
        
        J1850_BUS0_OCR_REG = tmr_cnt + delay;
     ad8:	93 0f       	add	r25, r19
     ada:	a1 cf       	rjmp	.-190    	; 0xa1e <__vector_7+0x102>
        
        j1850_bus[0].state = 0;
    }
    else if(j1850_bus[0].state == 10) {
        //Try to send something
        j1850_bus[0].state = 11;
     adc:	8b e0       	ldi	r24, 0x0B	; 11
     ade:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <j1850_bus+0x1>
        j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bit_ptr = 0;
     ae2:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     ae6:	8f e0       	ldi	r24, 0x0F	; 15
     ae8:	8e 9f       	mul	r24, r30
     aea:	f0 01       	movw	r30, r0
     aec:	11 24       	eor	r1, r1
     aee:	eb 55       	subi	r30, 0x5B	; 91
     af0:	fd 4f       	sbci	r31, 0xFD	; 253
     af2:	10 82       	st	Z, r1
        j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].byte_ptr = 0xFF;
     af4:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     af8:	8e 9f       	mul	r24, r30
     afa:	f0 01       	movw	r30, r0
     afc:	11 24       	eor	r1, r1
     afe:	ec 55       	subi	r30, 0x5C	; 92
     b00:	fd 4f       	sbci	r31, 0xFD	; 253
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	80 83       	st	Z, r24
        J1850_BUS0_PORT_REG &= ~J1850_BUS0_PORT_MSK;
     b06:	5e 98       	cbi	0x0b, 6	; 11
        J1850_BUS0_OCR_REG = tmr_cnt + TX_IFS;
     b08:	95 5b       	subi	r25, 0xB5	; 181
     b0a:	89 cf       	rjmp	.-238    	; 0xa1e <__vector_7+0x102>
        pin = J1850_BUS0_PIN_REG & J1850_BUS0_PIN_MSK;
        
        J1850_BUS0_PORT_REG ^= J1850_BUS0_PORT_MSK;
        
        if(j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bit_ptr) j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bit_ptr --;
        else if(j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bytes) {
     b0c:	ed 55       	subi	r30, 0x5D	; 93
     b0e:	fd 4f       	sbci	r31, 0xFD	; 253
     b10:	30 81       	ld	r19, Z
     b12:	31 11       	cpse	r19, r1
     b14:	18 c0       	rjmp	.+48     	; 0xb46 <__vector_7+0x22a>
            j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].byte_ptr ++;
            j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bit_ptr = 7;
        }
        else {
            //Done sending bits
            j1850_bus[0].state = 0;
     b16:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <j1850_bus+0x1>
            
            j1850_bus[0].tx_msg_start++;
     b1a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <j1850_bus+0x150>
            if(j1850_bus[0].tx_msg_start == J1850_MSG_BUF_SIZE_TX) j1850_bus[0].tx_msg_start = 0;
     b24:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     b28:	85 30       	cpi	r24, 0x05	; 5
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__vector_7+0x214>
     b2c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <j1850_bus+0x150>
            
            J1850_BUS0_OCIE_REG &= ~J1850_BUS0_OCIE_MSK;
     b30:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     b34:	8d 7f       	andi	r24, 0xFD	; 253
     b36:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
            return;
     b3a:	12 cf       	rjmp	.-476    	; 0x960 <__vector_7+0x44>
        
        pin = J1850_BUS0_PIN_REG & J1850_BUS0_PIN_MSK;
        
        if(pin) {
            //Bus isn't passive
            delay = TX_IFS;
     b3c:	8b e4       	ldi	r24, 0x4B	; 75
     b3e:	6e cf       	rjmp	.-292    	; 0xa1c <__vector_7+0x100>
        
        if(match) {
            uint8_t prev_end = j1850_bus[0].rx_msg_end;
            j1850_bus[0].new_msg = 1;
            j1850_bus[0].rx_msg_end++;
            if(j1850_bus[0].rx_msg_end == J1850_MSG_BUF_SIZE_RX) j1850_bus[0].rx_msg_end = 0;
     b40:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <j1850_bus+0x104>
     b44:	59 cf       	rjmp	.-334    	; 0x9f8 <__vector_7+0xdc>
        
        J1850_BUS0_PORT_REG ^= J1850_BUS0_PORT_MSK;
        
        if(j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bit_ptr) j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bit_ptr --;
        else if(j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bytes) {
            j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bytes --;
     b46:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     b4a:	8e 9f       	mul	r24, r30
     b4c:	f0 01       	movw	r30, r0
     b4e:	11 24       	eor	r1, r1
     b50:	ed 55       	subi	r30, 0x5D	; 93
     b52:	fd 4f       	sbci	r31, 0xFD	; 253
     b54:	30 81       	ld	r19, Z
     b56:	31 50       	subi	r19, 0x01	; 1
     b58:	30 83       	st	Z, r19
            j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].byte_ptr ++;
     b5a:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     b5e:	8e 9f       	mul	r24, r30
     b60:	f0 01       	movw	r30, r0
     b62:	11 24       	eor	r1, r1
     b64:	ec 55       	subi	r30, 0x5C	; 92
     b66:	fd 4f       	sbci	r31, 0xFD	; 253
     b68:	30 81       	ld	r19, Z
     b6a:	3f 5f       	subi	r19, 0xFF	; 255
     b6c:	30 83       	st	Z, r19
            j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].bit_ptr = 7;
     b6e:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
     b72:	8e 9f       	mul	r24, r30
     b74:	f0 01       	movw	r30, r0
     b76:	11 24       	eor	r1, r1
     b78:	eb 55       	subi	r30, 0x5B	; 91
     b7a:	fd 4f       	sbci	r31, 0xFD	; 253
     b7c:	87 e0       	ldi	r24, 0x07	; 7
     b7e:	80 83       	st	Z, r24
     b80:	72 cf       	rjmp	.-284    	; 0xa66 <__vector_7+0x14a>
        }
        
        uint8_t delay;
        
        if(!(j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].buf[j1850_bus[0].tx_buf[j1850_bus[0].tx_msg_start].byte_ptr] & 0x80) != !pin) delay = TX_SHORT;
        else delay = TX_LONG;
     b82:	30 e2       	ldi	r19, 0x20	; 32
     b84:	92 cf       	rjmp	.-220    	; 0xaaa <__vector_7+0x18e>

00000b86 <__vector_8>:
        J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
        J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
    }
}

ISR(TIMER2_COMPB_vect) {
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	ef 93       	push	r30
     b9e:	ff 93       	push	r31
    uint8_t tmr_cnt = TCNT2;
     ba0:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    
    if(j1850_bus[1].state == 2) {
     ba4:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <j1850_bus+0x153>
     ba8:	82 30       	cpi	r24, 0x02	; 2
     baa:	e1 f0       	breq	.+56     	; 0xbe4 <__vector_8+0x5e>
            if(j1850_bus[1].rx_msg_end == j1850_bus[1].rx_msg_start) j1850_bus[1].rx_msg_end = prev_end;
        }
        
        j1850_bus[1].state = 0;
    }
    else if(j1850_bus[1].state == 10) {
     bac:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <j1850_bus+0x153>
     bb0:	8a 30       	cpi	r24, 0x0A	; 10
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <__vector_8+0x30>
     bb4:	c8 c0       	rjmp	.+400    	; 0xd46 <__vector_8+0x1c0>
        J1850_BUS1_PORT_REG &= ~J1850_BUS1_PORT_MSK;
        J1850_BUS1_OCR_REG = tmr_cnt + TX_IFS;
        J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
        J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
    }
    else if(j1850_bus[1].state == 11) {
     bb6:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <j1850_bus+0x153>
     bba:	8b 30       	cpi	r24, 0x0B	; 11
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <__vector_8+0x3a>
     bbe:	5c c0       	rjmp	.+184    	; 0xc78 <__vector_8+0xf2>
        
        J1850_BUS1_OCR_REG = tmr_cnt + delay;
        J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
        J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
    }
    else if(j1850_bus[1].state == 12) {
     bc0:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <j1850_bus+0x153>
     bc4:	8c 30       	cpi	r24, 0x0C	; 12
     bc6:	09 f4       	brne	.+2      	; 0xbca <__vector_8+0x44>
     bc8:	68 c0       	rjmp	.+208    	; 0xc9a <__vector_8+0x114>
        
        J1850_BUS1_OCR_REG = tmr_cnt + delay;
        J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
        J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
    }
}
     bca:	ff 91       	pop	r31
     bcc:	ef 91       	pop	r30
     bce:	bf 91       	pop	r27
     bd0:	af 91       	pop	r26
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	3f 91       	pop	r19
     bd8:	2f 91       	pop	r18
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	0f 90       	pop	r0
     be0:	1f 90       	pop	r1
     be2:	18 95       	reti
ISR(TIMER2_COMPB_vect) {
    uint8_t tmr_cnt = TCNT2;
    
    if(j1850_bus[1].state == 2) {
        //Received EOD
        J1850_BUS1_OCIE_REG &= ~J1850_BUS1_OCIE_MSK;
     be4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     be8:	8b 7f       	andi	r24, 0xFB	; 251
     bea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
        
        uint8_t match = 0;
        if(j1850_listen_bytes) {
     bee:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <j1850_listen_bytes>
     bf2:	88 23       	and	r24, r24
     bf4:	39 f1       	breq	.+78     	; 0xc44 <__vector_8+0xbe>
            uint8_t i;
            for(i=0; i<j1850_listen_bytes; i++) {
     bf6:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <j1850_listen_bytes>
     bfa:	88 23       	and	r24, r24
     bfc:	d1 f1       	breq	.+116    	; 0xc72 <__vector_8+0xec>
                if(j1850_bus[1].rx_buf[j1850_bus[1].rx_msg_end].buf[0] == j1850_listen_headers[i]) {
     bfe:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <j1850_bus+0x256>
     c02:	8f e0       	ldi	r24, 0x0F	; 15
     c04:	e8 9f       	mul	r30, r24
     c06:	f0 01       	movw	r30, r0
     c08:	11 24       	eor	r1, r1
     c0a:	e8 51       	subi	r30, 0x18	; 24
     c0c:	fd 4f       	sbci	r31, 0xFD	; 253
     c0e:	90 81       	ld	r25, Z
     c10:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <j1850_listen_headers>
     c14:	98 17       	cp	r25, r24
     c16:	b1 f0       	breq	.+44     	; 0xc44 <__vector_8+0xbe>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	3f e0       	ldi	r19, 0x0F	; 15
        J1850_BUS1_OCIE_REG &= ~J1850_BUS1_OCIE_MSK;
        
        uint8_t match = 0;
        if(j1850_listen_bytes) {
            uint8_t i;
            for(i=0; i<j1850_listen_bytes; i++) {
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
     c1e:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <j1850_listen_bytes>
     c22:	89 17       	cp	r24, r25
     c24:	30 f5       	brcc	.+76     	; 0xc72 <__vector_8+0xec>
                if(j1850_bus[1].rx_buf[j1850_bus[1].rx_msg_end].buf[0] == j1850_listen_headers[i]) {
     c26:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <j1850_bus+0x256>
     c2a:	3e 9f       	mul	r19, r30
     c2c:	f0 01       	movw	r30, r0
     c2e:	11 24       	eor	r1, r1
     c30:	e8 51       	subi	r30, 0x18	; 24
     c32:	fd 4f       	sbci	r31, 0xFD	; 253
     c34:	20 81       	ld	r18, Z
     c36:	e8 2f       	mov	r30, r24
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	e6 5c       	subi	r30, 0xC6	; 198
     c3c:	fb 4f       	sbci	r31, 0xFB	; 251
     c3e:	90 81       	ld	r25, Z
     c40:	29 13       	cpse	r18, r25
     c42:	ec cf       	rjmp	.-40     	; 0xc1c <__vector_8+0x96>
            }
        }
        else match = 1;
        
        if(match) {
            uint8_t prev_end = j1850_bus[1].rx_msg_end;
     c44:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <j1850_bus+0x256>
            j1850_bus[1].new_msg = 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <j1850_bus+0x155>
            j1850_bus[1].rx_msg_end++;
     c4e:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <j1850_bus+0x256>
     c52:	8f 5f       	subi	r24, 0xFF	; 255
     c54:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <j1850_bus+0x256>
            if(j1850_bus[1].rx_msg_end == J1850_MSG_BUF_SIZE_RX) j1850_bus[1].rx_msg_end = 0;
     c58:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <j1850_bus+0x256>
     c5c:	81 31       	cpi	r24, 0x11	; 17
     c5e:	09 f4       	brne	.+2      	; 0xc62 <__vector_8+0xdc>
     c60:	a4 c0       	rjmp	.+328    	; 0xdaa <__vector_8+0x224>
            if(j1850_bus[1].rx_msg_end == j1850_bus[1].rx_msg_start) j1850_bus[1].rx_msg_end = prev_end;
     c62:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <j1850_bus+0x256>
     c66:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <j1850_bus+0x255>
     c6a:	98 13       	cpse	r25, r24
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <__vector_8+0xec>
     c6e:	20 93 e8 03 	sts	0x03E8, r18	; 0x8003e8 <j1850_bus+0x256>
        }
        
        j1850_bus[1].state = 0;
     c72:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <j1850_bus+0x153>
     c76:	a9 cf       	rjmp	.-174    	; 0xbca <__vector_8+0x44>
        uint8_t delay;
        uint8_t pin;
        
        pin = J1850_BUS1_PIN_REG & J1850_BUS1_PIN_MSK;
        
        if(pin) {
     c78:	4a 99       	sbic	0x09, 2	; 9
     c7a:	95 c0       	rjmp	.+298    	; 0xda6 <__vector_8+0x220>
            //Bus isn't passive
            delay = TX_IFS;
        }
        else {
            //Successfully waited for IFS
            j1850_bus[1].state = 12;
     c7c:	8c e0       	ldi	r24, 0x0C	; 12
     c7e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <j1850_bus+0x153>
            J1850_BUS1_PORT_REG |= J1850_BUS1_PORT_MSK;
     c82:	29 9a       	sbi	0x05, 1	; 5
            delay = TX_SOF;
     c84:	82 e3       	ldi	r24, 0x32	; 50
        }
        
        J1850_BUS1_OCR_REG = tmr_cnt + delay;
     c86:	98 0f       	add	r25, r24
        if(!(j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].buf[j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].byte_ptr] & 0x80) != !pin) delay = TX_SHORT;
        else delay = TX_LONG;
        
        j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].buf[j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].byte_ptr] <<= 1;
        
        J1850_BUS1_OCR_REG = tmr_cnt + delay;
     c88:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
        J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
     c8c:	ba 9a       	sbi	0x17, 2	; 23
        J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
     c8e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     c92:	84 60       	ori	r24, 0x04	; 4
     c94:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     c98:	98 cf       	rjmp	.-208    	; 0xbca <__vector_8+0x44>
        J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
    }
    else if(j1850_bus[1].state == 12) {
        //Sending bits
        uint8_t pin;
        pin = J1850_BUS1_PIN_REG & J1850_BUS1_PIN_MSK;
     c9a:	29 b1       	in	r18, 0x09	; 9
        
        J1850_BUS1_PORT_REG ^= J1850_BUS1_PORT_MSK;
     c9c:	35 b1       	in	r19, 0x05	; 5
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	83 27       	eor	r24, r19
     ca2:	85 b9       	out	0x05, r24	; 5
        
        if(j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bit_ptr) j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bit_ptr --;
     ca4:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     ca8:	8f e0       	ldi	r24, 0x0F	; 15
     caa:	8e 9f       	mul	r24, r30
     cac:	f0 01       	movw	r30, r0
     cae:	11 24       	eor	r1, r1
     cb0:	e9 50       	subi	r30, 0x09	; 9
     cb2:	fc 4f       	sbci	r31, 0xFC	; 252
     cb4:	30 81       	ld	r19, Z
     cb6:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     cba:	8e 9f       	mul	r24, r30
     cbc:	f0 01       	movw	r30, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	33 23       	and	r19, r19
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <__vector_8+0x140>
     cc4:	58 c0       	rjmp	.+176    	; 0xd76 <__vector_8+0x1f0>
     cc6:	e9 50       	subi	r30, 0x09	; 9
     cc8:	fc 4f       	sbci	r31, 0xFC	; 252
     cca:	80 81       	ld	r24, Z
     ccc:	81 50       	subi	r24, 0x01	; 1
     cce:	80 83       	st	Z, r24
            return;
        }
        
        uint8_t delay;
        
        if(!(j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].buf[j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].byte_ptr] & 0x80) != !pin) delay = TX_SHORT;
     cd0:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     cd4:	a0 91 34 04 	lds	r26, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     cd8:	8f e0       	ldi	r24, 0x0F	; 15
     cda:	8a 9f       	mul	r24, r26
     cdc:	d0 01       	movw	r26, r0
     cde:	11 24       	eor	r1, r1
     ce0:	aa 50       	subi	r26, 0x0A	; 10
     ce2:	bc 4f       	sbci	r27, 0xFC	; 252
     ce4:	3c 91       	ld	r19, X
     ce6:	8e 9f       	mul	r24, r30
     ce8:	f0 01       	movw	r30, r0
     cea:	11 24       	eor	r1, r1
     cec:	ee 56       	subi	r30, 0x6E	; 110
     cee:	fe 4f       	sbci	r31, 0xFE	; 254
     cf0:	e3 0f       	add	r30, r19
     cf2:	f1 1d       	adc	r31, r1
     cf4:	e9 5a       	subi	r30, 0xA9	; 169
     cf6:	fd 4f       	sbci	r31, 0xFD	; 253
     cf8:	80 81       	ld	r24, Z
     cfa:	80 95       	com	r24
     cfc:	88 1f       	adc	r24, r24
     cfe:	88 27       	eor	r24, r24
     d00:	88 1f       	adc	r24, r24
     d02:	22 fb       	bst	r18, 2
     d04:	22 27       	eor	r18, r18
     d06:	20 f9       	bld	r18, 0
     d08:	31 e0       	ldi	r19, 0x01	; 1
     d0a:	23 27       	eor	r18, r19
     d0c:	82 17       	cp	r24, r18
     d0e:	09 f4       	brne	.+2      	; 0xd12 <__vector_8+0x18c>
     d10:	6d c0       	rjmp	.+218    	; 0xdec <__vector_8+0x266>
     d12:	30 e1       	ldi	r19, 0x10	; 16
        else delay = TX_LONG;
        
        j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].buf[j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].byte_ptr] <<= 1;
     d14:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     d18:	a0 91 34 04 	lds	r26, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     d1c:	8f e0       	ldi	r24, 0x0F	; 15
     d1e:	8a 9f       	mul	r24, r26
     d20:	d0 01       	movw	r26, r0
     d22:	11 24       	eor	r1, r1
     d24:	aa 50       	subi	r26, 0x0A	; 10
     d26:	bc 4f       	sbci	r27, 0xFC	; 252
     d28:	2c 91       	ld	r18, X
     d2a:	8e 9f       	mul	r24, r30
     d2c:	f0 01       	movw	r30, r0
     d2e:	11 24       	eor	r1, r1
     d30:	ee 56       	subi	r30, 0x6E	; 110
     d32:	fe 4f       	sbci	r31, 0xFE	; 254
     d34:	e2 0f       	add	r30, r18
     d36:	f1 1d       	adc	r31, r1
     d38:	e9 5a       	subi	r30, 0xA9	; 169
     d3a:	fd 4f       	sbci	r31, 0xFD	; 253
     d3c:	80 81       	ld	r24, Z
     d3e:	88 0f       	add	r24, r24
     d40:	80 83       	st	Z, r24
        
        J1850_BUS1_OCR_REG = tmr_cnt + delay;
     d42:	93 0f       	add	r25, r19
     d44:	a1 cf       	rjmp	.-190    	; 0xc88 <__vector_8+0x102>
        
        j1850_bus[1].state = 0;
    }
    else if(j1850_bus[1].state == 10) {
        //Try to send something
        j1850_bus[1].state = 11;
     d46:	8b e0       	ldi	r24, 0x0B	; 11
     d48:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <j1850_bus+0x153>
        j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bit_ptr = 0;
     d4c:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     d50:	8f e0       	ldi	r24, 0x0F	; 15
     d52:	8e 9f       	mul	r24, r30
     d54:	f0 01       	movw	r30, r0
     d56:	11 24       	eor	r1, r1
     d58:	e9 50       	subi	r30, 0x09	; 9
     d5a:	fc 4f       	sbci	r31, 0xFC	; 252
     d5c:	10 82       	st	Z, r1
        j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].byte_ptr = 0xFF;
     d5e:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     d62:	8e 9f       	mul	r24, r30
     d64:	f0 01       	movw	r30, r0
     d66:	11 24       	eor	r1, r1
     d68:	ea 50       	subi	r30, 0x0A	; 10
     d6a:	fc 4f       	sbci	r31, 0xFC	; 252
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	80 83       	st	Z, r24
        J1850_BUS1_PORT_REG &= ~J1850_BUS1_PORT_MSK;
     d70:	29 98       	cbi	0x05, 1	; 5
        J1850_BUS1_OCR_REG = tmr_cnt + TX_IFS;
     d72:	95 5b       	subi	r25, 0xB5	; 181
     d74:	89 cf       	rjmp	.-238    	; 0xc88 <__vector_8+0x102>
        pin = J1850_BUS1_PIN_REG & J1850_BUS1_PIN_MSK;
        
        J1850_BUS1_PORT_REG ^= J1850_BUS1_PORT_MSK;
        
        if(j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bit_ptr) j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bit_ptr --;
        else if(j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bytes) {
     d76:	eb 50       	subi	r30, 0x0B	; 11
     d78:	fc 4f       	sbci	r31, 0xFC	; 252
     d7a:	30 81       	ld	r19, Z
     d7c:	31 11       	cpse	r19, r1
     d7e:	18 c0       	rjmp	.+48     	; 0xdb0 <__vector_8+0x22a>
            j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].byte_ptr ++;
            j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bit_ptr = 7;
        }
        else {
            //Done sending bits
            j1850_bus[1].state = 0;
     d80:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <j1850_bus+0x153>
            
            j1850_bus[1].tx_msg_start++;
     d84:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <j1850_bus+0x2a2>
            if(j1850_bus[1].tx_msg_start == J1850_MSG_BUF_SIZE_TX) j1850_bus[1].tx_msg_start = 0;
     d8e:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     d92:	85 30       	cpi	r24, 0x05	; 5
     d94:	11 f4       	brne	.+4      	; 0xd9a <__vector_8+0x214>
     d96:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <j1850_bus+0x2a2>
            
            J1850_BUS1_OCIE_REG &= ~J1850_BUS1_OCIE_MSK;
     d9a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     d9e:	8b 7f       	andi	r24, 0xFB	; 251
     da0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
            return;
     da4:	12 cf       	rjmp	.-476    	; 0xbca <__vector_8+0x44>
        
        pin = J1850_BUS1_PIN_REG & J1850_BUS1_PIN_MSK;
        
        if(pin) {
            //Bus isn't passive
            delay = TX_IFS;
     da6:	8b e4       	ldi	r24, 0x4B	; 75
     da8:	6e cf       	rjmp	.-292    	; 0xc86 <__vector_8+0x100>
        
        if(match) {
            uint8_t prev_end = j1850_bus[1].rx_msg_end;
            j1850_bus[1].new_msg = 1;
            j1850_bus[1].rx_msg_end++;
            if(j1850_bus[1].rx_msg_end == J1850_MSG_BUF_SIZE_RX) j1850_bus[1].rx_msg_end = 0;
     daa:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <j1850_bus+0x256>
     dae:	59 cf       	rjmp	.-334    	; 0xc62 <__vector_8+0xdc>
        
        J1850_BUS1_PORT_REG ^= J1850_BUS1_PORT_MSK;
        
        if(j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bit_ptr) j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bit_ptr --;
        else if(j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bytes) {
            j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bytes --;
     db0:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     db4:	8e 9f       	mul	r24, r30
     db6:	f0 01       	movw	r30, r0
     db8:	11 24       	eor	r1, r1
     dba:	eb 50       	subi	r30, 0x0B	; 11
     dbc:	fc 4f       	sbci	r31, 0xFC	; 252
     dbe:	30 81       	ld	r19, Z
     dc0:	31 50       	subi	r19, 0x01	; 1
     dc2:	30 83       	st	Z, r19
            j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].byte_ptr ++;
     dc4:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     dc8:	8e 9f       	mul	r24, r30
     dca:	f0 01       	movw	r30, r0
     dcc:	11 24       	eor	r1, r1
     dce:	ea 50       	subi	r30, 0x0A	; 10
     dd0:	fc 4f       	sbci	r31, 0xFC	; 252
     dd2:	30 81       	ld	r19, Z
     dd4:	3f 5f       	subi	r19, 0xFF	; 255
     dd6:	30 83       	st	Z, r19
            j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].bit_ptr = 7;
     dd8:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <j1850_bus+0x2a2>
     ddc:	8e 9f       	mul	r24, r30
     dde:	f0 01       	movw	r30, r0
     de0:	11 24       	eor	r1, r1
     de2:	e9 50       	subi	r30, 0x09	; 9
     de4:	fc 4f       	sbci	r31, 0xFC	; 252
     de6:	87 e0       	ldi	r24, 0x07	; 7
     de8:	80 83       	st	Z, r24
     dea:	72 cf       	rjmp	.-284    	; 0xcd0 <__vector_8+0x14a>
        }
        
        uint8_t delay;
        
        if(!(j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].buf[j1850_bus[1].tx_buf[j1850_bus[1].tx_msg_start].byte_ptr] & 0x80) != !pin) delay = TX_SHORT;
        else delay = TX_LONG;
     dec:	30 e2       	ldi	r19, 0x20	; 32
     dee:	92 cf       	rjmp	.-220    	; 0xd14 <__vector_8+0x18e>

00000df0 <j1850_send_packet>:

/*
 * Starts the interrupt system sending out the next message in the buffer
 */
void j1850_send_packet(uint8_t bus) {
    j1850_bus[bus].state = 10;
     df0:	22 e5       	ldi	r18, 0x52	; 82
     df2:	31 e0       	ldi	r19, 0x01	; 1
     df4:	82 9f       	mul	r24, r18
     df6:	f0 01       	movw	r30, r0
     df8:	83 9f       	mul	r24, r19
     dfa:	f0 0d       	add	r31, r0
     dfc:	11 24       	eor	r1, r1
     dfe:	ee 56       	subi	r30, 0x6E	; 110
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	9a e0       	ldi	r25, 0x0A	; 10
     e04:	91 83       	std	Z+1, r25	; 0x01
    
    if(bus) {
     e06:	81 11       	cpse	r24, r1
     e08:	0c c0       	rjmp	.+24     	; 0xe22 <j1850_send_packet+0x32>
        J1850_BUS1_OCR_REG = TCNT2 + 1;
        J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
        J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
    }
    else {
        J1850_BUS0_OCR_REG = TCNT2 + 1;
     e0a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
        J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
     e14:	b9 9a       	sbi	0x17, 1	; 23
        J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
     e16:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     e1a:	82 60       	ori	r24, 0x02	; 2
     e1c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     e20:	08 95       	ret
 */
void j1850_send_packet(uint8_t bus) {
    j1850_bus[bus].state = 10;
    
    if(bus) {
        J1850_BUS1_OCR_REG = TCNT2 + 1;
     e22:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
        J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
     e2c:	ba 9a       	sbi	0x17, 2	; 23
        J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
     e2e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     e38:	08 95       	ret

00000e3a <j1850_crc>:
}

/*
 * Calculates an appropriate CRC for a given message
 */
uint8_t j1850_crc(uint8_t *msg_buf, int8_t nbytes) {
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
    uint8_t crc_reg=0xff,poly,byte_count,bit_count;
    uint8_t *byte_point;
    uint8_t bit_point;

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
     e3e:	06 2e       	mov	r0, r22
     e40:	00 0c       	add	r0, r0
     e42:	77 0b       	sbc	r23, r23
     e44:	16 16       	cp	r1, r22
     e46:	17 06       	cpc	r1, r23
     e48:	0c f0       	brlt	.+2      	; 0xe4c <j1850_crc+0x12>
     e4a:	1e c1       	rjmp	.+572    	; 0x1088 <j1850_crc+0x24e>
     e4c:	58 2f       	mov	r21, r24
     e4e:	fc 01       	movw	r30, r24
     e50:	8f ef       	ldi	r24, 0xFF	; 255
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
            {
                if (crc_reg & 0x80)
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	df c0       	rjmp	.+446    	; 0x1014 <j1850_crc+0x1da>
     e56:	2d e1       	ldi	r18, 0x1D	; 29
            else        // case for new bit = 0
            {
                poly=0;
                if (crc_reg & 0x80)
                    poly=0x1d;
                crc_reg= (crc_reg << 1) ^ poly;
     e58:	28 27       	eor	r18, r24
     e5a:	cb 23       	and	r28, r27
     e5c:	09 f4       	brne	.+2      	; 0xe60 <j1850_crc+0x26>
     e5e:	f2 c0       	rjmp	.+484    	; 0x1044 <j1850_crc+0x20a>
     e60:	cc e1       	ldi	r28, 0x1C	; 28
            {
                if (crc_reg & 0x80)
                    poly=1; // define the polynomial
                else
                    poly=0x1c;
                crc_reg= ( (crc_reg << 1) | 1) ^ poly;
     e62:	81 60       	ori	r24, 0x01	; 1
     e64:	8c 27       	eor	r24, r28
     e66:	bd 23       	and	r27, r29
     e68:	3b 2b       	or	r19, r27
     e6a:	09 f4       	brne	.+2      	; 0xe6e <j1850_crc+0x34>
     e6c:	28 2f       	mov	r18, r24

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     e6e:	a6 fb       	bst	r26, 6
     e70:	99 27       	eor	r25, r25
     e72:	90 f9       	bld	r25, 0
            {
                if (crc_reg & 0x80)
     e74:	82 2f       	mov	r24, r18
     e76:	88 1f       	adc	r24, r24
     e78:	88 27       	eor	r24, r24
     e7a:	88 1f       	adc	r24, r24
     e7c:	c8 2f       	mov	r28, r24
     e7e:	c4 27       	eor	r28, r20

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     e80:	b9 2f       	mov	r27, r25
     e82:	b4 27       	eor	r27, r20
            else        // case for new bit = 0
            {
                poly=0;
                if (crc_reg & 0x80)
                    poly=0x1d;
                crc_reg= (crc_reg << 1) ^ poly;
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	8b 23       	and	r24, r27
     e8c:	09 f4       	brne	.+2      	; 0xe90 <j1850_crc+0x56>
     e8e:	f6 c0       	rjmp	.+492    	; 0x107c <j1850_crc+0x242>
     e90:	8d e1       	ldi	r24, 0x1D	; 29
     e92:	82 27       	eor	r24, r18
     e94:	9c 23       	and	r25, r28
     e96:	09 f4       	brne	.+2      	; 0xe9a <j1850_crc+0x60>
     e98:	ef c0       	rjmp	.+478    	; 0x1078 <j1850_crc+0x23e>
     e9a:	9c e1       	ldi	r25, 0x1C	; 28
            {
                if (crc_reg & 0x80)
                    poly=1; // define the polynomial
                else
                    poly=0x1c;
                crc_reg= ( (crc_reg << 1) | 1) ^ poly;
     e9c:	21 60       	ori	r18, 0x01	; 1
     e9e:	29 27       	eor	r18, r25
     ea0:	b1 11       	cpse	r27, r1
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <j1850_crc+0x6c>
     ea4:	82 2f       	mov	r24, r18

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     ea6:	a5 fb       	bst	r26, 5
     ea8:	cc 27       	eor	r28, r28
     eaa:	c0 f9       	bld	r28, 0
            {
                if (crc_reg & 0x80)
     eac:	38 2f       	mov	r19, r24
     eae:	33 1f       	adc	r19, r19
     eb0:	33 27       	eor	r19, r19
     eb2:	33 1f       	adc	r19, r19
     eb4:	b3 2f       	mov	r27, r19
     eb6:	b4 27       	eor	r27, r20

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     eb8:	dc 2f       	mov	r29, r28
     eba:	d4 27       	eor	r29, r20
     ebc:	3d 23       	and	r19, r29
            else        // case for new bit = 0
            {
                poly=0;
                if (crc_reg & 0x80)
                    poly=0x1d;
                crc_reg= (crc_reg << 1) ^ poly;
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	33 23       	and	r19, r19
     ec6:	09 f4       	brne	.+2      	; 0xeca <j1850_crc+0x90>
     ec8:	d5 c0       	rjmp	.+426    	; 0x1074 <j1850_crc+0x23a>
     eca:	2d e1       	ldi	r18, 0x1D	; 29
     ecc:	28 27       	eor	r18, r24
     ece:	cb 23       	and	r28, r27
     ed0:	09 f4       	brne	.+2      	; 0xed4 <j1850_crc+0x9a>
     ed2:	ce c0       	rjmp	.+412    	; 0x1070 <j1850_crc+0x236>
     ed4:	cc e1       	ldi	r28, 0x1C	; 28
            {
                if (crc_reg & 0x80)
                    poly=1; // define the polynomial
                else
                    poly=0x1c;
                crc_reg= ( (crc_reg << 1) | 1) ^ poly;
     ed6:	81 60       	ori	r24, 0x01	; 1
     ed8:	8c 27       	eor	r24, r28
     eda:	bd 23       	and	r27, r29
     edc:	3b 2b       	or	r19, r27
     ede:	09 f4       	brne	.+2      	; 0xee2 <j1850_crc+0xa8>
     ee0:	28 2f       	mov	r18, r24

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     ee2:	a4 fb       	bst	r26, 4
     ee4:	cc 27       	eor	r28, r28
     ee6:	c0 f9       	bld	r28, 0
            {
                if (crc_reg & 0x80)
     ee8:	92 2f       	mov	r25, r18
     eea:	99 1f       	adc	r25, r25
     eec:	99 27       	eor	r25, r25
     eee:	99 1f       	adc	r25, r25
     ef0:	b9 2f       	mov	r27, r25
     ef2:	b4 27       	eor	r27, r20

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     ef4:	dc 2f       	mov	r29, r28
     ef6:	d4 27       	eor	r29, r20
     ef8:	9d 23       	and	r25, r29
            else        // case for new bit = 0
            {
                poly=0;
                if (crc_reg & 0x80)
                    poly=0x1d;
                crc_reg= (crc_reg << 1) ^ poly;
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	99 23       	and	r25, r25
     f02:	09 f4       	brne	.+2      	; 0xf06 <j1850_crc+0xcc>
     f04:	b3 c0       	rjmp	.+358    	; 0x106c <j1850_crc+0x232>
     f06:	8d e1       	ldi	r24, 0x1D	; 29
     f08:	82 27       	eor	r24, r18
     f0a:	cb 23       	and	r28, r27
     f0c:	09 f4       	brne	.+2      	; 0xf10 <j1850_crc+0xd6>
     f0e:	ac c0       	rjmp	.+344    	; 0x1068 <j1850_crc+0x22e>
     f10:	cc e1       	ldi	r28, 0x1C	; 28
            {
                if (crc_reg & 0x80)
                    poly=1; // define the polynomial
                else
                    poly=0x1c;
                crc_reg= ( (crc_reg << 1) | 1) ^ poly;
     f12:	21 60       	ori	r18, 0x01	; 1
     f14:	2c 27       	eor	r18, r28
     f16:	bd 23       	and	r27, r29
     f18:	9b 2b       	or	r25, r27
     f1a:	09 f4       	brne	.+2      	; 0xf1e <j1850_crc+0xe4>
     f1c:	82 2f       	mov	r24, r18

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     f1e:	a3 fb       	bst	r26, 3
     f20:	cc 27       	eor	r28, r28
     f22:	c0 f9       	bld	r28, 0
            {
                if (crc_reg & 0x80)
     f24:	38 2f       	mov	r19, r24
     f26:	33 1f       	adc	r19, r19
     f28:	33 27       	eor	r19, r19
     f2a:	33 1f       	adc	r19, r19
     f2c:	b3 2f       	mov	r27, r19
     f2e:	b4 27       	eor	r27, r20

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     f30:	dc 2f       	mov	r29, r28
     f32:	d4 27       	eor	r29, r20
     f34:	3d 23       	and	r19, r29
            else        // case for new bit = 0
            {
                poly=0;
                if (crc_reg & 0x80)
                    poly=0x1d;
                crc_reg= (crc_reg << 1) ^ poly;
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	33 23       	and	r19, r19
     f3e:	09 f4       	brne	.+2      	; 0xf42 <j1850_crc+0x108>
     f40:	91 c0       	rjmp	.+290    	; 0x1064 <j1850_crc+0x22a>
     f42:	2d e1       	ldi	r18, 0x1D	; 29
     f44:	28 27       	eor	r18, r24
     f46:	cb 23       	and	r28, r27
     f48:	09 f4       	brne	.+2      	; 0xf4c <j1850_crc+0x112>
     f4a:	8a c0       	rjmp	.+276    	; 0x1060 <j1850_crc+0x226>
     f4c:	cc e1       	ldi	r28, 0x1C	; 28
            {
                if (crc_reg & 0x80)
                    poly=1; // define the polynomial
                else
                    poly=0x1c;
                crc_reg= ( (crc_reg << 1) | 1) ^ poly;
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	8c 27       	eor	r24, r28
     f52:	bd 23       	and	r27, r29
     f54:	3b 2b       	or	r19, r27
     f56:	09 f4       	brne	.+2      	; 0xf5a <j1850_crc+0x120>
     f58:	28 2f       	mov	r18, r24

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     f5a:	a2 fb       	bst	r26, 2
     f5c:	cc 27       	eor	r28, r28
     f5e:	c0 f9       	bld	r28, 0
            {
                if (crc_reg & 0x80)
     f60:	92 2f       	mov	r25, r18
     f62:	99 1f       	adc	r25, r25
     f64:	99 27       	eor	r25, r25
     f66:	99 1f       	adc	r25, r25
     f68:	b9 2f       	mov	r27, r25
     f6a:	b4 27       	eor	r27, r20

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     f6c:	dc 2f       	mov	r29, r28
     f6e:	d4 27       	eor	r29, r20
     f70:	9d 23       	and	r25, r29
            else        // case for new bit = 0
            {
                poly=0;
                if (crc_reg & 0x80)
                    poly=0x1d;
                crc_reg= (crc_reg << 1) ^ poly;
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	22 0f       	add	r18, r18
     f76:	33 1f       	adc	r19, r19
     f78:	99 23       	and	r25, r25
     f7a:	09 f4       	brne	.+2      	; 0xf7e <j1850_crc+0x144>
     f7c:	6f c0       	rjmp	.+222    	; 0x105c <j1850_crc+0x222>
     f7e:	8d e1       	ldi	r24, 0x1D	; 29
     f80:	82 27       	eor	r24, r18
     f82:	cb 23       	and	r28, r27
     f84:	09 f4       	brne	.+2      	; 0xf88 <j1850_crc+0x14e>
     f86:	68 c0       	rjmp	.+208    	; 0x1058 <j1850_crc+0x21e>
     f88:	cc e1       	ldi	r28, 0x1C	; 28
            {
                if (crc_reg & 0x80)
                    poly=1; // define the polynomial
                else
                    poly=0x1c;
                crc_reg= ( (crc_reg << 1) | 1) ^ poly;
     f8a:	21 60       	ori	r18, 0x01	; 1
     f8c:	2c 27       	eor	r18, r28
     f8e:	bd 23       	and	r27, r29
     f90:	9b 2b       	or	r25, r27
     f92:	09 f4       	brne	.+2      	; 0xf96 <j1850_crc+0x15c>
     f94:	82 2f       	mov	r24, r18

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     f96:	a1 fb       	bst	r26, 1
     f98:	cc 27       	eor	r28, r28
     f9a:	c0 f9       	bld	r28, 0
            {
                if (crc_reg & 0x80)
     f9c:	38 2f       	mov	r19, r24
     f9e:	33 1f       	adc	r19, r19
     fa0:	33 27       	eor	r19, r19
     fa2:	33 1f       	adc	r19, r19
     fa4:	b3 2f       	mov	r27, r19
     fa6:	b4 27       	eor	r27, r20

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     fa8:	dc 2f       	mov	r29, r28
     faa:	d4 27       	eor	r29, r20
     fac:	3d 23       	and	r19, r29
            else        // case for new bit = 0
            {
                poly=0;
                if (crc_reg & 0x80)
                    poly=0x1d;
                crc_reg= (crc_reg << 1) ^ poly;
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	33 23       	and	r19, r19
     fb6:	09 f4       	brne	.+2      	; 0xfba <j1850_crc+0x180>
     fb8:	4d c0       	rjmp	.+154    	; 0x1054 <j1850_crc+0x21a>
     fba:	2d e1       	ldi	r18, 0x1D	; 29
     fbc:	28 27       	eor	r18, r24
     fbe:	cb 23       	and	r28, r27
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <j1850_crc+0x18a>
     fc2:	46 c0       	rjmp	.+140    	; 0x1050 <j1850_crc+0x216>
     fc4:	cc e1       	ldi	r28, 0x1C	; 28
            {
                if (crc_reg & 0x80)
                    poly=1; // define the polynomial
                else
                    poly=0x1c;
                crc_reg= ( (crc_reg << 1) | 1) ^ poly;
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	8c 27       	eor	r24, r28
     fca:	bd 23       	and	r27, r29
     fcc:	3b 2b       	or	r19, r27
     fce:	09 f4       	brne	.+2      	; 0xfd2 <j1850_crc+0x198>
     fd0:	28 2f       	mov	r18, r24

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     fd2:	a1 70       	andi	r26, 0x01	; 1
            {
                if (crc_reg & 0x80)
     fd4:	92 2f       	mov	r25, r18
     fd6:	99 1f       	adc	r25, r25
     fd8:	99 27       	eor	r25, r25
     fda:	99 1f       	adc	r25, r25
     fdc:	b9 2f       	mov	r27, r25
     fde:	b4 27       	eor	r27, r20

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
     fe0:	ca 2f       	mov	r28, r26
     fe2:	c4 27       	eor	r28, r20
     fe4:	9c 23       	and	r25, r28
            else        // case for new bit = 0
            {
                poly=0;
                if (crc_reg & 0x80)
                    poly=0x1d;
                crc_reg= (crc_reg << 1) ^ poly;
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	99 23       	and	r25, r25
     fee:	71 f1       	breq	.+92     	; 0x104c <j1850_crc+0x212>
     ff0:	8d e1       	ldi	r24, 0x1D	; 29
     ff2:	82 27       	eor	r24, r18
     ff4:	ab 23       	and	r26, r27
     ff6:	41 f1       	breq	.+80     	; 0x1048 <j1850_crc+0x20e>
     ff8:	ac e1       	ldi	r26, 0x1C	; 28
            {
                if (crc_reg & 0x80)
                    poly=1; // define the polynomial
                else
                    poly=0x1c;
                crc_reg= ( (crc_reg << 1) | 1) ^ poly;
     ffa:	21 60       	ori	r18, 0x01	; 1
     ffc:	2a 27       	eor	r18, r26
     ffe:	bc 23       	and	r27, r28
    1000:	9b 2b       	or	r25, r27
    1002:	09 f0       	breq	.+2      	; 0x1006 <j1850_crc+0x1cc>
    1004:	28 2f       	mov	r18, r24
    1006:	82 2f       	mov	r24, r18
    1008:	ae 2f       	mov	r26, r30
    100a:	a5 1b       	sub	r26, r21
uint8_t j1850_crc(uint8_t *msg_buf, int8_t nbytes) {
    uint8_t crc_reg=0xff,poly,byte_count,bit_count;
    uint8_t *byte_point;
    uint8_t bit_point;

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	a6 17       	cp	r26, r22
    1010:	b7 07       	cpc	r27, r23
    1012:	b4 f5       	brge	.+108    	; 0x1080 <j1850_crc+0x246>
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
    1014:	a1 91       	ld	r26, Z+
    1016:	ca 2f       	mov	r28, r26
    1018:	cc 1f       	adc	r28, r28
    101a:	cc 27       	eor	r28, r28
    101c:	cc 1f       	adc	r28, r28
            {
                if (crc_reg & 0x80)
    101e:	38 2f       	mov	r19, r24
    1020:	33 1f       	adc	r19, r19
    1022:	33 27       	eor	r19, r19
    1024:	33 1f       	adc	r19, r19
    1026:	b3 2f       	mov	r27, r19
    1028:	b4 27       	eor	r27, r20

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    {
        for (bit_count=0, bit_point=0x80 ; bit_count<8; ++bit_count, bit_point>>=1)
        {
            if (bit_point & *byte_point)    // case for new bit = 1
    102a:	dc 2f       	mov	r29, r28
    102c:	d4 27       	eor	r29, r20
    102e:	3d 23       	and	r19, r29
            else        // case for new bit = 0
            {
                poly=0;
                if (crc_reg & 0x80)
                    poly=0x1d;
                crc_reg= (crc_reg << 1) ^ poly;
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	31 11       	cpse	r19, r1
    1038:	0e cf       	rjmp	.-484    	; 0xe56 <j1850_crc+0x1c>
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	28 27       	eor	r18, r24
    103e:	cb 23       	and	r28, r27
    1040:	09 f0       	breq	.+2      	; 0x1044 <j1850_crc+0x20a>
    1042:	0e cf       	rjmp	.-484    	; 0xe60 <j1850_crc+0x26>
    1044:	c1 e0       	ldi	r28, 0x01	; 1
    1046:	0d cf       	rjmp	.-486    	; 0xe62 <j1850_crc+0x28>
    1048:	a1 e0       	ldi	r26, 0x01	; 1
    104a:	d7 cf       	rjmp	.-82     	; 0xffa <j1850_crc+0x1c0>
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	d1 cf       	rjmp	.-94     	; 0xff2 <j1850_crc+0x1b8>
    1050:	c1 e0       	ldi	r28, 0x01	; 1
    1052:	b9 cf       	rjmp	.-142    	; 0xfc6 <j1850_crc+0x18c>
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	b2 cf       	rjmp	.-156    	; 0xfbc <j1850_crc+0x182>
    1058:	c1 e0       	ldi	r28, 0x01	; 1
    105a:	97 cf       	rjmp	.-210    	; 0xf8a <j1850_crc+0x150>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 cf       	rjmp	.-224    	; 0xf80 <j1850_crc+0x146>
    1060:	c1 e0       	ldi	r28, 0x01	; 1
    1062:	75 cf       	rjmp	.-278    	; 0xf4e <j1850_crc+0x114>
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	6e cf       	rjmp	.-292    	; 0xf44 <j1850_crc+0x10a>
    1068:	c1 e0       	ldi	r28, 0x01	; 1
    106a:	53 cf       	rjmp	.-346    	; 0xf12 <j1850_crc+0xd8>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	4c cf       	rjmp	.-360    	; 0xf08 <j1850_crc+0xce>
    1070:	c1 e0       	ldi	r28, 0x01	; 1
    1072:	31 cf       	rjmp	.-414    	; 0xed6 <j1850_crc+0x9c>
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	2a cf       	rjmp	.-428    	; 0xecc <j1850_crc+0x92>
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	10 cf       	rjmp	.-480    	; 0xe9c <j1850_crc+0x62>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	09 cf       	rjmp	.-494    	; 0xe92 <j1850_crc+0x58>
    1080:	80 95       	com	r24
            }
        }
    }
    return ~crc_reg;    // Return CRC
}
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret
uint8_t j1850_crc(uint8_t *msg_buf, int8_t nbytes) {
    uint8_t crc_reg=0xff,poly,byte_count,bit_count;
    uint8_t *byte_point;
    uint8_t bit_point;

    for (byte_count=0, byte_point=msg_buf; byte_count<nbytes; ++byte_count, ++byte_point)
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	fb cf       	rjmp	.-10     	; 0x1082 <j1850_crc+0x248>

0000108c <j1850_process>:
 * Housekeeping
 */
void j1850_process(void) {
    uint8_t bus;
    for(bus=0; bus<2; bus++) {
        if((j1850_bus[bus].tx_msg_start != j1850_bus[bus].tx_msg_end) && j1850_bus[bus].state == 0) {
    108c:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <j1850_bus+0x150>
    1090:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <j1850_bus+0x151>
    1094:	98 17       	cp	r25, r24
    1096:	21 f0       	breq	.+8      	; 0x10a0 <j1850_process+0x14>
    1098:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <j1850_bus+0x1>
    109c:	88 23       	and	r24, r24
    109e:	c9 f0       	breq	.+50     	; 0x10d2 <j1850_process+0x46>
    10a0:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <j1850_bus+0x2a2>
    10a4:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <j1850_bus+0x2a3>
    10a8:	98 17       	cp	r25, r24
    10aa:	19 f0       	breq	.+6      	; 0x10b2 <j1850_process+0x26>
    10ac:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <j1850_bus+0x153>
    10b0:	81 11       	cpse	r24, r1
    10b2:	08 95       	ret

/*
 * Starts the interrupt system sending out the next message in the buffer
 */
void j1850_send_packet(uint8_t bus) {
    j1850_bus[bus].state = 10;
    10b4:	8a e0       	ldi	r24, 0x0A	; 10
    10b6:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <j1850_bus+0x153>
    
    if(bus) {
        J1850_BUS1_OCR_REG = TCNT2 + 1;
    10ba:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
        J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
    10c4:	ba 9a       	sbi	0x17, 2	; 23
        J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
    10c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    10ca:	84 60       	ori	r24, 0x04	; 4
    10cc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    10d0:	08 95       	ret

/*
 * Starts the interrupt system sending out the next message in the buffer
 */
void j1850_send_packet(uint8_t bus) {
    j1850_bus[bus].state = 10;
    10d2:	8a e0       	ldi	r24, 0x0A	; 10
    10d4:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <j1850_bus+0x1>
        J1850_BUS1_OCR_REG = TCNT2 + 1;
        J1850_BUS1_OCF_REG |= J1850_BUS1_OCF_MSK;
        J1850_BUS1_OCIE_REG |= J1850_BUS1_OCIE_MSK;
    }
    else {
        J1850_BUS0_OCR_REG = TCNT2 + 1;
    10d8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
        J1850_BUS0_OCF_REG |= J1850_BUS0_OCF_MSK;
    10e2:	b9 9a       	sbi	0x17, 1	; 23
        J1850_BUS0_OCIE_REG |= J1850_BUS0_OCIE_MSK;
    10e4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    10e8:	82 60       	ori	r24, 0x02	; 2
    10ea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    10ee:	d8 cf       	rjmp	.-80     	; 0x10a0 <j1850_process+0x14>

000010f0 <j1850_init>:
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <j1850_listen_bytes>
    10f6:	8d e8       	ldi	r24, 0x8D	; 141
    10f8:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <j1850_listen_headers>
    10fc:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <j1850_bus+0x103>
    1100:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <j1850_bus+0x150>
    1104:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <j1850_bus+0x255>
    1108:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <j1850_bus+0x2a2>
    110c:	56 9a       	sbi	0x0a, 6	; 10
    110e:	53 98       	cbi	0x0a, 3	; 10
    1110:	ed e6       	ldi	r30, 0x6D	; 109
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	88 60       	ori	r24, 0x08	; 8
    1118:	80 83       	st	Z, r24
    111a:	21 9a       	sbi	0x04, 1	; 4
    111c:	52 98       	cbi	0x0a, 2	; 10
    111e:	80 81       	ld	r24, Z
    1120:	84 60       	ori	r24, 0x04	; 4
    1122:	80 83       	st	Z, r24
    1124:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1134:	08 95       	ret

00001136 <main>:
    last_pwr_state = this_pwr_state;
}

int main(void) {
    //Reset and turn off WDT
    wdt_reset();
    1136:	a8 95       	wdr
    MCUSR &= ~(1<<WDRF);
    1138:	84 b7       	in	r24, 0x34	; 52
    113a:	87 7f       	andi	r24, 0xF7	; 247
    113c:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDCE) | (1<<WDE);
    113e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1142:	88 61       	ori	r24, 0x18	; 24
    1144:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    WDTCSR = 0x00;
    1148:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    //Move channels and start the conversion
    ADMUX = ADMUX ^ (1<<MUX0);
}

static void tmrs_init(void) {
    tmr_10ms = 0;
    114c:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <tmr_10ms>
    tmr_1s = 0;
    1150:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <tmr_1s>
    
    //Select CTC mode
    TCCR0A = 0b00000010;
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	84 bd       	out	0x24, r24	; 36
    //Set a 10ms timeout with a x1024 prescaler
    TCCR0B = 0b00000101;
    1158:	85 e0       	ldi	r24, 0x05	; 5
    115a:	85 bd       	out	0x25, r24	; 37
    OCR0A = 78;
    115c:	8e e4       	ldi	r24, 0x4E	; 78
    115e:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<OCIE0A);
    1160:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1164:	82 60       	ori	r24, 0x02	; 2
    1166:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    POWER_HOLD_PORT |= POWER_HOLD_MSK;
}

static void ad_init(void) {
    //Set result as left justified
    ADMUX |= (1<<ADLAR);
    116a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    116e:	80 62       	ori	r24, 0x20	; 32
    1170:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    //Auto trigger on TC0 match
    ADCSRB |= (1<<ADTS1) | (1<<ADTS0);
    1174:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    1178:	83 60       	ori	r24, 0x03	; 3
    117a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    //Disable digital on AN0, AN1
    DIDR0 |= (1<<ADC1D) | (1<<ADC0D);
    117e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    1182:	83 60       	ori	r24, 0x03	; 3
    1184:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    //Enable, auto trigger, interrupt enabled, 1/16 clock rate
    ADCSRA |= (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | (1<<ADPS2);
    1188:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    118c:	8c 6a       	ori	r24, 0xAC	; 172
    118e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    TIMSK0 |= (1<<OCIE0A);
}

static void io_init(void) {
    //Power hold output
    POWER_HOLD_DDR |= POWER_HOLD_MSK;
    1192:	54 9a       	sbi	0x0a, 4	; 10
    POWER_HOLD_PORT |= POWER_HOLD_MSK;
    1194:	5c 9a       	sbi	0x0b, 4	; 11
    tmrs_init();
    
    //Other peripherals
    ad_init();
    io_init();
    spi_init_slave();
    1196:	0e 94 c1 02 	call	0x582	; 0x582 <spi_init_slave>
    j1850_init();
    119a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <j1850_init>
    
    sei();
    119e:	78 94       	sei
    11a0:	04 c0       	rjmp	.+8      	; 0x11aa <main+0x74>
            sw_new = 0;
            read_input_state();
        }
        
        //Do SPI
        spi_process();
    11a2:	0e 94 20 01 	call	0x240	; 0x240 <spi_process>
        
        //Do J1850
        j1850_process();
    11a6:	0e 94 46 08 	call	0x108c	; 0x108c <j1850_process>
    sei();
    
    for (;;)
    {
        //Check for AD results, convert to switch states, check other inputs
        if(sw_new) {
    11aa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sw_new>
    11ae:	88 23       	and	r24, r24
    11b0:	c1 f3       	breq	.-16     	; 0x11a2 <main+0x6c>
            sw_new = 0;
    11b2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <sw_new>
    uint8_t sw;
    for(sw=0; sw<2; sw++) {
        uint8_t rot = 0;
        if(sw) rot = 4;
        
        if(sw_adc[sw] > SW_THRESH_4) this_sw_state |= 0x01<<rot;
    11b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sw_adc>
    11ba:	86 3d       	cpi	r24, 0xD6	; 214
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <main+0x8a>
    11be:	43 c0       	rjmp	.+134    	; 0x1246 <main+0x110>
        else if(sw_adc[sw] > SW_THRESH_3) this_sw_state |= 0x02<<rot;
    11c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sw_adc>
    11c4:	8a 3a       	cpi	r24, 0xAA	; 170
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <main+0x94>
    11c8:	48 c0       	rjmp	.+144    	; 0x125a <main+0x124>
        else if(sw_adc[sw] > SW_THRESH_2) this_sw_state |= 0x03<<rot;
    11ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sw_adc>
    11ce:	88 37       	cpi	r24, 0x78	; 120
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <main+0x9e>
    11d2:	4c c0       	rjmp	.+152    	; 0x126c <main+0x136>
        else if(sw_adc[sw] > SW_THRESH_1) this_sw_state |= 0x04<<rot;
    11d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sw_adc>
    11d8:	8c 34       	cpi	r24, 0x4C	; 76
    11da:	08 f0       	brcs	.+2      	; 0x11de <main+0xa8>
    11dc:	50 c0       	rjmp	.+160    	; 0x127e <main+0x148>
        else if(sw_adc[sw] > SW_THRESH_0) this_sw_state |= 0x05<<rot;
    11de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sw_adc>
    11e2:	8c 31       	cpi	r24, 0x1C	; 28
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <main+0xb2>
    11e6:	54 c0       	rjmp	.+168    	; 0x1290 <main+0x15a>
    11e8:	85 e1       	ldi	r24, 0x15	; 21
    11ea:	25 e2       	ldi	r18, 0x25	; 37
    11ec:	35 e3       	ldi	r19, 0x35	; 53
    11ee:	45 e4       	ldi	r20, 0x45	; 69
    11f0:	55 e5       	ldi	r21, 0x55	; 85
    11f2:	65 e0       	ldi	r22, 0x05	; 5
    uint8_t sw;
    for(sw=0; sw<2; sw++) {
        uint8_t rot = 0;
        if(sw) rot = 4;
        
        if(sw_adc[sw] > SW_THRESH_4) this_sw_state |= 0x01<<rot;
    11f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sw_adc+0x1>
    11f8:	96 3d       	cpi	r25, 0xD6	; 214
    11fa:	90 f4       	brcc	.+36     	; 0x1220 <main+0xea>
        else if(sw_adc[sw] > SW_THRESH_3) this_sw_state |= 0x02<<rot;
    11fc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sw_adc+0x1>
    1200:	8a 3a       	cpi	r24, 0xAA	; 170
    1202:	90 f5       	brcc	.+100    	; 0x1268 <main+0x132>
        else if(sw_adc[sw] > SW_THRESH_2) this_sw_state |= 0x03<<rot;
    1204:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sw_adc+0x1>
    1208:	88 37       	cpi	r24, 0x78	; 120
    120a:	b8 f5       	brcc	.+110    	; 0x127a <main+0x144>
        else if(sw_adc[sw] > SW_THRESH_1) this_sw_state |= 0x04<<rot;
    120c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sw_adc+0x1>
    1210:	8c 34       	cpi	r24, 0x4C	; 76
    1212:	e0 f5       	brcc	.+120    	; 0x128c <main+0x156>
        else if(sw_adc[sw] > SW_THRESH_0) this_sw_state |= 0x05<<rot;
    1214:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sw_adc+0x1>
    1218:	8c 31       	cpi	r24, 0x1C	; 28
    121a:	08 f0       	brcs	.+2      	; 0x121e <main+0xe8>
    121c:	40 c0       	rjmp	.+128    	; 0x129e <main+0x168>
    121e:	86 2f       	mov	r24, r22
    }
    
    //Do a little debouncing
    if(this_sw_state == last_sw_state) sw_state = this_sw_state;
    1220:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <last_sw_state>
    1224:	98 17       	cp	r25, r24
    1226:	b1 f0       	breq	.+44     	; 0x1254 <main+0x11e>
    last_sw_state = this_sw_state;
    1228:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <last_sw_state>
    
    if(ACC_REG & ACC_MSK) this_pwr_state |= 0x01;
    122c:	83 b1       	in	r24, 0x03	; 3
    122e:	81 70       	andi	r24, 0x01	; 1
    if(PI_REG & PI_MSK) this_pwr_state |= 0x02;
    1230:	35 99       	sbic	0x06, 5	; 6
    1232:	82 60       	ori	r24, 0x02	; 2
    
    //Do a little debouncing
    if(this_pwr_state == last_pwr_state) pwr_state = this_pwr_state;
    1234:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <last_pwr_state>
    1238:	98 13       	cpse	r25, r24
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <main+0x10a>
    123c:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <pwr_state>
    last_pwr_state = this_pwr_state;
    1240:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <last_pwr_state>
    1244:	ae cf       	rjmp	.-164    	; 0x11a2 <main+0x6c>
    uint8_t sw;
    for(sw=0; sw<2; sw++) {
        uint8_t rot = 0;
        if(sw) rot = 4;
        
        if(sw_adc[sw] > SW_THRESH_4) this_sw_state |= 0x01<<rot;
    1246:	81 e1       	ldi	r24, 0x11	; 17
    1248:	21 e2       	ldi	r18, 0x21	; 33
    124a:	31 e3       	ldi	r19, 0x31	; 49
    124c:	41 e4       	ldi	r20, 0x41	; 65
    124e:	51 e5       	ldi	r21, 0x51	; 81
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	d0 cf       	rjmp	.-96     	; 0x11f4 <main+0xbe>
        else if(sw_adc[sw] > SW_THRESH_1) this_sw_state |= 0x04<<rot;
        else if(sw_adc[sw] > SW_THRESH_0) this_sw_state |= 0x05<<rot;
    }
    
    //Do a little debouncing
    if(this_sw_state == last_sw_state) sw_state = this_sw_state;
    1254:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <sw_state>
    1258:	e7 cf       	rjmp	.-50     	; 0x1228 <main+0xf2>
    for(sw=0; sw<2; sw++) {
        uint8_t rot = 0;
        if(sw) rot = 4;
        
        if(sw_adc[sw] > SW_THRESH_4) this_sw_state |= 0x01<<rot;
        else if(sw_adc[sw] > SW_THRESH_3) this_sw_state |= 0x02<<rot;
    125a:	82 e1       	ldi	r24, 0x12	; 18
    125c:	22 e2       	ldi	r18, 0x22	; 34
    125e:	32 e3       	ldi	r19, 0x32	; 50
    1260:	42 e4       	ldi	r20, 0x42	; 66
    1262:	52 e5       	ldi	r21, 0x52	; 82
    1264:	62 e0       	ldi	r22, 0x02	; 2
    1266:	c6 cf       	rjmp	.-116    	; 0x11f4 <main+0xbe>
    1268:	82 2f       	mov	r24, r18
    126a:	da cf       	rjmp	.-76     	; 0x1220 <main+0xea>
        else if(sw_adc[sw] > SW_THRESH_2) this_sw_state |= 0x03<<rot;
    126c:	83 e1       	ldi	r24, 0x13	; 19
    126e:	23 e2       	ldi	r18, 0x23	; 35
    1270:	33 e3       	ldi	r19, 0x33	; 51
    1272:	43 e4       	ldi	r20, 0x43	; 67
    1274:	53 e5       	ldi	r21, 0x53	; 83
    1276:	63 e0       	ldi	r22, 0x03	; 3
    1278:	bd cf       	rjmp	.-134    	; 0x11f4 <main+0xbe>
    127a:	83 2f       	mov	r24, r19
    127c:	d1 cf       	rjmp	.-94     	; 0x1220 <main+0xea>
        else if(sw_adc[sw] > SW_THRESH_1) this_sw_state |= 0x04<<rot;
    127e:	84 e1       	ldi	r24, 0x14	; 20
    1280:	24 e2       	ldi	r18, 0x24	; 36
    1282:	34 e3       	ldi	r19, 0x34	; 52
    1284:	44 e4       	ldi	r20, 0x44	; 68
    1286:	54 e5       	ldi	r21, 0x54	; 84
    1288:	64 e0       	ldi	r22, 0x04	; 4
    128a:	b4 cf       	rjmp	.-152    	; 0x11f4 <main+0xbe>
    128c:	84 2f       	mov	r24, r20
    128e:	c8 cf       	rjmp	.-112    	; 0x1220 <main+0xea>
        else if(sw_adc[sw] > SW_THRESH_0) this_sw_state |= 0x05<<rot;
    1290:	80 e1       	ldi	r24, 0x10	; 16
    1292:	20 e2       	ldi	r18, 0x20	; 32
    1294:	30 e3       	ldi	r19, 0x30	; 48
    1296:	40 e4       	ldi	r20, 0x40	; 64
    1298:	50 e5       	ldi	r21, 0x50	; 80
    //Enable, auto trigger, interrupt enabled, 1/16 clock rate
    ADCSRA |= (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | (1<<ADPS2);
}

static void read_input_state(void) {
    uint8_t this_sw_state = 0;
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	ab cf       	rjmp	.-170    	; 0x11f4 <main+0xbe>
        
        if(sw_adc[sw] > SW_THRESH_4) this_sw_state |= 0x01<<rot;
        else if(sw_adc[sw] > SW_THRESH_3) this_sw_state |= 0x02<<rot;
        else if(sw_adc[sw] > SW_THRESH_2) this_sw_state |= 0x03<<rot;
        else if(sw_adc[sw] > SW_THRESH_1) this_sw_state |= 0x04<<rot;
        else if(sw_adc[sw] > SW_THRESH_0) this_sw_state |= 0x05<<rot;
    129e:	85 2f       	mov	r24, r21
    12a0:	bf cf       	rjmp	.-130    	; 0x1220 <main+0xea>

000012a2 <__tablejump2__>:
    12a2:	ee 0f       	add	r30, r30
    12a4:	ff 1f       	adc	r31, r31
    12a6:	05 90       	lpm	r0, Z+
    12a8:	f4 91       	lpm	r31, Z
    12aa:	e0 2d       	mov	r30, r0
    12ac:	09 94       	ijmp

000012ae <_exit>:
    12ae:	f8 94       	cli

000012b0 <__stop_program>:
    12b0:	ff cf       	rjmp	.-2      	; 0x12b0 <__stop_program>
